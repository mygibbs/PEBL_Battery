## This reads in a data set, and computes scores according
## to unique PAR rules

define Start(p)
{
#gWin <- MakeWindow("black")
#gId <-GetEasyInput("Please Enter your Subject ID",gWin)
#Draw()
  gVerbose <- 0
  gfile <- FileOpenOverwrite("par-rescore.csv")
  FilePrint(gFile,"Filename,PEBLPers, PEBLPersErr, PARPers,PARPersErr")
  fnames <- FileReadList("files.txt")

#  fnames <- ["bcst64-2025.txt"]#,"bcst64-2005 copy.txt"]

  loop(i,fnames)
     {
        RunFile(i)
     }

}

define SetElement(list, i, item) {
    len <- Length(list)
    tmp <- []
    tmp1 <- []
    tmp2 <- []
    tmpId <- []
    newList <- []

    tmpId <- Append(tmpId, item)
    
    if (i > 1 and i < len) {
        tmp1 <- SubList(list, 1, i-1)
        tmp2 <- SubList(list, i+1, len)
        newList <- Merge(Merge(tmp1, tmpId), tmp2)
    } elseif(i == len) {
        tmp1 <- SubList(list, 1, len-1)
        newList <- Merge(tmp1, tmpId)
    } else {
        tmp2 <- Rest(list)
        newList <- Merge(tmpId, tmp2)
    }

    return newList
} 
 
define RunFile(fname)
{
    ##Step-by-step instructions:
    gOrder <- ["Positive", "Neutral", "Negative"]
  
    loop(i, gOrder) {

        ##1. read a ecst data file in:
        data <- FileReadTable("../data/"+i+"/"+fname+".csv")

        ##2. ScorePars expects a header row (with non-data)!!!!
        x <- ScorePAR(data)

        ##3. cobble the header back together:
        header <- Merge(First(data),["ptp","unambig","ptpCorr","tent","tent2","corr2","PARPERS","PARPERSERR"])

        ##4. Write out to a new file
        WriteCSV("../output/"+i+"/"+fname + "-rescore.csv", Merge([header],x))

        ##Calculate summaries of the two new statistics:
        sumPEBLPers <- SumUp(Nth(Transpose(x),15))
        sumPEBLPersErr <- SumUp(Nth(Transpose(x),16))

        sumPers <-  Sum(Nth(Transpose(x),25))
        sumPersErr <- Sum(Nth(Transpose(x),26))

        FilePrint(gfile,fname+"," +sumPEBLPers+","+sumPEBLPersErr+","+sumPers+","+sumPersErr)

    }
}


define ScorePAR(data)
{

  ##Extract the first header row.  
  numbers <- Sublist(data,2,Length(data))


##setup the rescoring variables
  finalData <- []
  tdata <- Transpose(numbers)
  runs <- Levels(Third(tdata))


  apparentrule <- 0
  
  ptp <- 0
 
  ptpCorr   <- 0
  
  lastrule <- 0
  rule <- 0
  norule <- 1

  ##Go through each run(category), one by one.
  loop(i, runs)
  {
#   Print("********************************************")
##this pulls out just the trials on a particular run

    run <- ToNumber(i)
    filter <- Match(Third(tdata),i)

    ##Get the trials for just this run:
    trials <- Filter(numbers,filter)
    length <- Length(trials)

    #First, establish what the PTP is for each trial

    ptps <- Repeat(0,length)
    unambigs <- Repeat(0,length)
    ptpCorrs <- Repeat(0,length)
    tentatives <- Repeat(0,length)
    count <- 0
    corrs <- Repeat(0,length) ##recompute correct trials later.

    minirun <- 0
    ptpFlag <- 0


    ##This keeps track of the number of unambiguous responses made in a row,
    ##that are unbroken by other unambiguous responses.  Note: it may be broken
    ## by ambiguous responses that are consistent with the unambiguous run


    unambigRunCounter <- 0

    ##This can increment when you have an ambiguous response consistent with
    ##the unambiguous response rule.
    consistentRunCounter <- 0
    tentativePTP <- 0


    lastrule <- rule
    rule <-ToNumber(Nth(First(trials),4))

    ##This will loop through just the trials associated with
    ##a particular run.  the rule should be the same for all of them.


	i <- 1
      while(i <= length)
       {
	 j <- Nth(trials,i)

	 ##shift the PTP on the first count of a new run,
	 ##to the previous rule.
         if(run > 1 and  count == 0)
         {
	   ptp <- lastrule
         } 


     ##Determine whether i was correct:
     corr <-  ToNumber(Nth(j,10))
     corrs <- SetElement(corrs,i,corr)
    

     ## Determine whether the PTP rule should 
     ##
 
     ##Determine whether they are operating according to 
     ##any unambiguous rule

      corrcol <-    ToNumber(Nth(j,12))
      corrshape <-  ToNumber(Nth(j,13))
      corrnum   <-  ToNumber(Nth(j,14))



			
      if((corrcol+corrshape+corrnum)==1)
           {
	       ## The PTP is the single correct element.
	       unambigRule <- corrcol + 2*corrshape + 3*corrnum
           } else {
	       unambigRule <- 0
           }


	 if(corr == 0)
	 {

	 if(ptp==0 and run==1 and unambigrule >0)
	 {
           ptp <- unambigrule
	 }

	  if(unambigRule >0 and not (unambigRule == tentativePTP))
  	   {

	    ##We just made an unambigous error that differs from
 	    ## the previous response
            tentativePTP <- unambigRule
            unambigRunCounter <- 1
            consistentRunCounter <- 1

            }elseif(unambigRule > 0 and 
		 unambigRule == tentativePTP)
	   {
            ##we have made an unambiguous error that is the same as 
            ##tentative PTP

            unambigRunCounter <- unambigRunCounter + 1
	    consistentRunCounter <- consistentRunCounter + 1
	   }elseif(unambigRule==0) {
	     ##We made an ambiguous error.
           
	   ##was it correct according to our current tentative rule?
	     if(tentativePTP>0)
	     {
	      tptpCorr <-ToNumber(Nth([corrCol,corrShape,corrNum],tentativePTP))==1
             }else{
	      tptpCorr <- 0
	     }

	  if(tptpCorr)
	  {


	     ##If so, this is 'consistent' with the tentative PTP rule, and
	     ##so we can increment.
             consistentRunCounter <- consistentRunCounter + 1
	   } else {

	      #It is not consistent with the PTP; reset the counter
	      unambigRunCounter <- 0
              consistentRunCounter <- 0
	   }
 
         } else {
	    SignalFatalError("This should never happen.")
         }
       } else {


         ##was it correct according to our current tentative rule?
	  if(tentativePTP>0)
	  {
	   tptpCorr <-ToNumber(Nth([corrCol,corrShape,corrNum],tentativePTP))==1
          }else{

	   tptpCorr <- 0
	  }

	  ##Here is a correct trial.
	  ##if it is still consistent with the tentative PTP, keep incrementing
	  if(tptpCorr and consistentRunCounter>0)
	  {

	     consistentRunCounter <- consistentRunCounter + 1
	  } else {
	    ##Otherwise, reset the counters.

	      unambigRunCounter <- 0
              consistentRunCounter <- 0

	  }
	 }


 
        ## At this point, we have unambigRunCounter, which tells us how
	## many unambiguous errors to the tentativePTP have been made (possible
	## broken by ambiguous-but-consistent responses), and we have
	## consistentRunCounter, which tells us how far back the entire run goes.
	## if unambigRunCounter == 3, we can set the PTP that many trials back.

        ##Now, let's decide whether the PTP should change

	##When it is greater than 3, it should get picked up by other logic.
       	if(unambigRunCounter == 3)
	{

           ptp <- tentativePTP
	   loop(ii, Sequence(i-consistentRunCounter+1,i,1))
	   {
	      ptps <- SetElement(ptps,ii,tentativePTP)
          
              ptpCorrii <- ToNumber(Nth(Nth(data,ii),11+tentativePTP))==1
	      ptpCorrs <- SetElement(ptpCorrs,ii,ptpCorrii)
	   }
	}elseif(run==1 and ptp == 0)
         { 

	 ##Define PTP during first run. We set the PTP based on the first
	 ##unambiguous error in the first run.
     	if(not corr)
         {
		 ##if the ptpFlag has been set, and if this
		 ##item's unambigous rule is the same, then
		 ##we have a new PTP; otherwise, reset the flag.
		 if(ptpFlag>0 and ptpFlag == unambigRule)
		 {

	              ptp <- unambigRule
		 } else {
                      ptpFlag <- 0
 		 }

            if(unambigRule>0)
            {
             ## The NEXT PTP is the single correct element.
             ##Identify which rule tripped the PTP flag in the first
             #run.  If we see it again right away, we need to change
	     #the ptp
             ptpFlag <- unambigRule

             }

         } 

     } else {
	 
	 ##Run is greater than 1, or at least we have a PTP defined
         ##Should the PTP change because of an overt rule shift?
         ##The PTP can change if you make three unambiguous 
         ##responses to the same rule in a row.



 	if(unambigRunCounter == 3) #was >=
          { 

	    
  	    ptp <-  unambigRule
          }
      }
     
      ptps <- SetElement(ptps,i,ptp)
      
      unambigs <- SetElement(unambigs,i,unambigRule)
      

      count <- count + 1	
      i <- i + 1
    }

  
	##If trials is just one trial long, then we've hit the end 
	##of the test.  This is a special-case for one-item sets at the end.
	if(Length(trials)==1)
	{
         ptps     <- [ptp]
    	 unambigs <- [unambigRule]
	 ptpCorrs <- [ptpCorr]
	  
	}
	 
 	 
 	 


     #############################################
     ## Let's make a pass through this category and 
     ## compute ptpCorr--was this correct according to the 
     ## ptp?  Our previous computations of this were based only
     ## on tentatives, and did not go back 


     newtrials <- Transpose(Merge(Transpose(trials),[ptps,unambigs,ptpCorrs]))

     loop(x,newtrials)	
     {
       ptp <- Nth(x,19)
       ptpCorr <- Nth(x,11+ptp)=="1"
       x <- SetElement(x,21, ptpCorr)

     }

     ###############################################################
     ##We have established the ptps for each of the trials within
     ##the run. Now, go through the trials and score perseverative 
     ##responses and perseverative errors  



	 ##loop through and mark possibly sandwiched items as
 	 ## tentative
	 lasttent <- 0

	 x <- 1
         ## Now, go through each trial of the current category and code its status in 
	 ## terms of 'tentative' perseverations.
         ## this will let us use the sandwich rule on the third pass (later).
         ## this is done by analyzing the PTP, which is correct at this point.
         ##
         ## Tentative scores:
         ## 0 is never a perseveration--it might be correct, or it might be 
	 ## a non-perseverative response
         ## 1 is always a perseveration.  


	 loop(kk,Sequence(1,Length(newtrials),1))
          {
          k <- Nth(newtrials,kk)
	   iCorr <- ToNumber(Nth(k,10))
           iptp <- ToNumber(Nth(k,19))
	   iUnambig <- ToNumber(Nth(k,20))
	   iptpCorr <- ToNumber(Nth(k,21))


	   ##Did the PTP just change?


	   if(kk==1)
	   {

	     iptpChange <- 0
	   } else {
              iptpChange <-  not (iptp == Nth(Nth(newtrials,kk-1),19))
	   }


	   ##This is a flag that tell us when the first rule of the test is initiated.
#	   if(norule and iptp>0)
#	   {
##	     norule <- 0
#	   }

	   if(iCorr)
	   {

	    ##if we are correct, but we are 1. ambiguous and 2. ptpCorr, code as 3;
	    ##this could be a perseveration if properly sandwiched.

	      tent <- 0
	      
             ##Note: all the rest are incorrect!!!
	   }elseif(iUnambig>0 and iptpCorr==1 and not iptpCHange)
	   {
 	   ##Simplest case first:  if it is incorrect, unambiguous, and ptpCorr, it is a perseveration.

	    tent <- 1

	   }elseif(iptpCorr ==1 and iptpChange and (not norule))
	   {
              ##We are always a perseveration if we are correct according to the PTP, we have just 
              ##switched categories (but these don't count)


	       tent <- 5

  	   } elseif(iptpCorr ==1 and norule)
	   {
              ##We are always a perseveration ON THE FIRST CATEGORY
	      ## but, like user-initiated switches, these are not counted
	      ## as perseverations, so we mark them 5


	       tent <- 5
	       norule <- 0  ##This may not be needed

  	   }elseif(iptpCorr==1 and not ( iUnambig==0) and not iptpchange) {
             ##was it an unambigous response that was a correct response to the PTP?
	     tent <- 2

          }else{

  	     tent <- 0
         }

	  if(iUnambig==0 and iptpCorr==1)
	    {
	      tent <- 3
	    }


         if(tent>0)
	   {
	     ##If not unambiguous:
	     if(iUnambig==0)
		 {
		   tent <- 3
		 }
	   }
 

	   tentatives <- SetElement(tentatives,x,tent)
	   lasttent <- tent
	   x <- x  + 1

           last <-k
	   
        }


	 ##Now, tentatives is written with four tokens 0 to 3.
	 ##0 is never a possible perseveration
         ##1 are always a perseveration
	 ##2 are always a perseveration, at a rule shift.
	 ##3 might be a persevaration, if sandwiched between 1s and 2s
	 ##4 (computed next) are a recoding of 3s from tentative to valid.
	 ##5 are unambiguous errors at the start of a user-initiated rule change, and so 
	 ## they don't count as perseverations.


	 ##Any tentatives must be followed by a 'sure thing'--a 1
	 ##So---go through tentatives backward and rewrite 3s to 0 when they
	 ##don't follow a 1 or 3
	 
	 pairs <- (Transpose([tentatives,corrs]))
         ids <- Sequence(1,Length(pairs),1)
         
	 ##This just computes the 'sandwich rule'.  
	 ##it looks for runs of 3s sandwiched between 1s and 2s.
	 ##Any runs such as this will be changed to 4s;
	 ## non-runs will be changed to 0s.	 

	 loop(pairid,ids)
	 {
	   pair <- Nth(pairs,pairid)
	   
	   if (IsList(pair)) 
	   {
	       i <- First(pair)
	   } else {
	     break
	   }
	   if(i==3)
	   {
	    startid <-pairid-1
	    ##Find the first element prior in the list that is not a 3.
	    endid <- pairid
	    cont <- 1
	    while(endid<(Length(corrs)+1) and cont)
	    {
	      endid <- endid+1
	      
	      ##endID might be outside the list; which means it went until a switch or the rules were over.
	      ##this can cause problems when you want to look at the endid list item....
	      if(endid<=Length(corrs))
	      {
  	      if(not First(Nth(pairs,endid)) == 3)
	      {
	        cont <- 0
	      }
	      }
	      ##OK, now the potential endpoints of the run are
	      ##startid and endid.  If either of these are
	      ## outside the bounds of the list or equal to 0, we violate the
	      ## sandwich rule and 3 becomes 0; otherwise, it becomes 4.

	      if(startid<1 or endid >Length(corrs))
	      {
	       good <- 0

	      }else {

	        good <-  (First(Nth(pairs,startid))>0 and First(Nth(pairs,endid))>0)*4
              }
 
                ##Now, we should reset the 3s in our sequence with 'good'
  

                seq <- Sequence(Max([1,startid+1]),endid-1,1)

		loop(s,seq)
		{
            tmpList <- pairs
            len <- Length(pairs)
            tmp <- []
            tmpId <- SetElement(Nth(pairs,s),1,good)
            ##if (s == 1) {
            ##    tmp2 <- Rest(pairs)
            ##    pairs <- Merge(tmpId, tmp2)
            ##} elseif (s == Length(pairs)) {
            ##    tmp1 <- RemoveSubset(pairs, [len])
            ##    pairs <- Merge(tmp1, tmpId)
            ##} else {
            ##    tmp1 <- SubList(tmpList, 1, s-1)
            ##    tmp2 <- SubList(tmpList, s+1, len)
            ##    pairs <- Merge(Merge(tmp1, tmpId), tmp2)
            ##}
            pairs <- SetElement(pairs, s, tmpId)
		}

            }

          }}
	   

         #the 3s should be gone from pairs, replaced by 0s and 4s

         count <- 1
	 persevs <- []
	 perserrs <- []
	 loop(pair,pairs)
	 {

	 
	    persev <- First(pair)>0 and (not First(pair)==5)
        persevs <- Append(persevs,persev)
	    
	    error <-  (ToNumber(Second(pair))==0)
	    perserrs <- Append(perserrs, persev and error)

	    count <- count +  1
         }
     
	   finalData <- Merge(finalData,
                    	   Transpose(Merge(Transpose(newtrials),
	                                   [tentatives,First(Transpose(pairs)),Second(Transpose(pairs)),persevs,perserrs])))

      }

   return (finalData)

}



define WriteCSV(name,table)
{
  fileout <- FileOpenOverWrite(name)
  loop(i,table)
  {
     loop(j,i)
	 {
	     FilePrint_(fileout,j+",")
     }
	 FilePrint(fileout,"")
  }
  FileClose(fileout)
}

##This find the sum of a list of numbers coded as strings.
define SumUp(list)
 {
   sum <- 0
    loop(i,list)
    {
      sum <- sum + ToNumber(i)
    }
 return sum
}
