#!/usr/local/bin/pebl
#################################################################
##  PEBL Continuous Performance Task (PCPT), a continuous
##  performance task modeled after Conner's CPT.
##  For use with PEBL 0.07 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Test Battery
##  2006-02 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  Version 0.3 
##
##
##  Continuous performance task modeled after Conners Continuous 
##  Performance Task.  This is a vigilance task, which takes approx
##  14 minutes to complete.  360 letters approx 1 inch in size are 
##  presented one at a time.  Participant must respond by pressing 
##  the space bar to all stimuli except the X.  
##
##  If the giveFeedback parameter is set to 1, The PCPT will give a short (50ms)
##  feedback cue indicating whether  the response was correct or not--a green + 
##  for correct, and a red - for incorrect.  This feedback was not
##  present in Conners
##  task.  As of Version 0.3, the default is for this feedback to be
##  OFF, unlike earlier released prior to 2009.
## 
##  References:
##  C. Keith Conners,  Jeffery N. Epstein,  Adrian Angold,  
##      John Klaric (2003) Continuous performance test performance 
##      in a normative epidemiological sample Journal of Abnormal 
##      Child Psychology,
##
##
#################################################################

define Start(lPar)
{

 
  ## Initialize global objects for use later. Defined at end of file
  Initialize()
  Print(TimeStamp())

   cycles   <-  6          ## Number of times the 3-ISI cycle is repeated
   blockSize <- 18         ## Number of trials per block
   presTime  <- 250        ## Presentation time in ms.
   isiVals   <- [1000, 2000, 4000]
   probX     <- 0.1
   letters     <- ["A","B","C","D","E","F","G","H","I",
	               "J","L","M","O","P","Q","R","S","U"]
   numBlocks <- cycles * Length(isiVals)
 
   giveFeedback <- 0
   

   ################################################
   ##  Create the randomized block structure stimuli.

   isiSeq <- Flatten(ShuffleRepeat(isiVals,cycles))

  ####################################################
  ## Begin presenting and collecting data
  ####################################################
   ## Give instructions; wait for them to hit a key, 
   SetText(gInstructions,"You are about to take part in an experiment that " +
           "involves attending to stimuli on a screen.  It will take " +
           "approximately 14 minutes.  You will see letters presented on "+
           "a screen briefly. Your goal is to press the spacebar as quickly " +
           "as possible after each letter, except if the letter is an 'X'. " + 
           "DO NOT RESPOND to X stimuli.  To begin, press the spacebar.")

   Show(gInstructions)
   Draw()  
   WaitForKeyPress(" ")
   Hide(gInstructions)
   Draw()
    
   gInstructions.text <- "You may now take a short break.  Press the spacebar to continue on to the next block.  Remember, use the spacebar to respond to all stimuli EXCEPT the X"

  ##############################################
  ##############################################
  ##
  ## Set up the basic  environment 
  ##

   datafile   <- FileOpenWrite("pcpt-"+ gSubNum + ".txt")
   reportfile <- FileOpenWrite("pcpt-report-" + gSubNum + ".txt")



   ## data structures which save data for analysis and
   ## report at end of study. 

   rtCorr1000 <- []
   rtCorr2000 <- []
   rtCorr4000 <- []
   rtInc1000  <- []
   rtInc2000  <- []
   rtInc4000  <- []
   om1000 <- 0   # Ommission error (failure to respond to target)
   om2000 <- 0
   om4000 <- 0
   co1000 <- 0   # Commission error (false alarm to foil)
   co2000 <- 0
   co4000 <- 0

   targ1000 <- 0  # Number of targets (Non-X stimuli)
   targ2000 <- 0
   targ4000 <- 0
   corT1000 <- 0  # Number of correct Targets
   corT2000 <- 0
   corT4000 <- 0
   corF1000 <- 0  # Number of correct Foils
   corF2000 <- 0
   corF4000 <- 0


   FilePrint(datafile,"sub block trial cond targ responded corr time rt")



    Wait(1000)
    trialNum <- 0
    block <- 0
    loop(isi,isiSeq)
    {

      block <- block + 1
      blocktrial <- 1
      while(blocktrial <= blocksize)
      {

      trialNum <- trialNum + 1
      blocktrial<- blocktrial + 1
      Hide(gFeedback)

      ## See if we should stop at the end of the block.
      ## 
      if(Mod(trialNum, blocksize) == 1 and trialNum > 1)
      { 
          Show(gInstructions)
	      Draw()
	      Wait(500)
          WaitForKeyPress(" ")
          Hide(gInstructions)
          Draw()
          Wait(1000)
      } 


      stim  <-First(SampleN(letters,1))
      if(Random() < probX)
      {
       stim <- "X"
      }

      gStim.text <- stim

      if(giveFeedback)
      {
        if(stim == "X")
        {
          SetFont(gFeedback, gIncFont)
          gFeedback.text <- "-"
        }else {
          SetFont(gFeedback,gCorrFont)
          gFeedback.text <- "+"
        }
      }

      timeStart <- GetTime()
	  endTime   <- timeStart + isi

      ########################
      ### Present Stimulus.
      ###

 
      rt <- -1
      responded <- 0
      Show(gStim)
      Draw()
      time1 <- GetTime()
	  r1 <- WaitForListKeyPressWithTimeout([" "],presTime,1)

      time2 <- GetTime()
      Hide(gStim)       
      if(r1 == " ")  #if r1==" "  we pressed the key before it disappeared
        {
          if(giveFeedback)
            {
             Show(gFeedback)
             Draw()
             Wait(50)
             Hide(gFeedback)
            }
           Draw()
           rt <- time2-time1
           responded <- 1
	       Wait(endtime - GetTime())
          
        } else {
          Draw()
          #if we haven't hit the key before the stimulus disappeared, do so now.
          r2 <- WaitForListKeyPressWithTimeout([" "],endTime - GetTime(),1)
          time3 <- GetTime()
          if(r2 == " ")  #if r2== " " we pressed the key
          {
            if(giveFeedback)
             {
               Show(gFeedback)
               Draw()
               Wait(50)
               Hide(gFeedback)
             }

            Draw()
            rt <- time3-time1
            responded <- 1
            Wait(endtime - GetTime())
          }

       }

     #Score trial as correct or incorrect.
     if(stim == "X")
     { 
       corr <- 1-responded
     } else { 
       corr <- responded
     }





    ############################################
    ##Update the correct targets/foils counters
     if(isi == 1000)
     {
       if(stim == "X")
       {
         corF1000 <- corF1000+corr

       }else{
         corT1000 <- corT1000+corr
         targ1000 <- targ1000 + 1
       }

      if(responded)
       {
         if(corr)
         {
           rtCorr1000 <- Append(rtCorr1000, rt)
         } else {
           rtInc1000 <- Append(rtInc1000, rt)
           co1000 <- co1000 + 1
         }

	
       } else {
         om1000 <- om1000 + (1-corr)
       }


     } elseif(isi == 2000)
     {
       if(stim == "X")
       {
         corF2000 <- corF2000+corr
       }else{
         corT2000 <- corT2000+corr
         targ2000 <- targ2000 + 1
       }
      if(responded)
       {
         if(corr)
         {
           rtCorr2000 <- Append(rtCorr2000, rt)
         } else {
           rtInc2000 <- Append(rtInc2000, rt)
           co2000 <- co2000 + 1
         }

	
       } else {
         om2000 <- om2000 + (1-corr)
       }



     } elseif( isi == 4000) {
       if(stim == "X")
       {
         corF4000 <- corF4000+corr
       }else{
         corT4000 <- corT4000+corr
         targ4000 <- targ4000 + 1
       }
       if(responded)
       {
          if(corr)
          {
           rtCorr4000 <- Append(rtCorr4000, rt)
          } else {
           rtInc4000 <- Append(rtInc4000, rt)
           co4000 <- co4000 + 1
          }
        } else {
         om4000 <- om4000 + (1-corr)
       }
	}


     FilePrint(datafile,gSubNum + " " + block + "  " + trialnum + " " + isi + "  " + stim + "  "+  responded + " " + corr + " "  + timeStart + " " + rt)
     }
    }

   trialspercond <- blockSize * cycles
   foil1000 <- trialspercond-targ1000 
   foil2000 <- trialspercond-targ2000
   foil4000 <- trialspercond-targ4000


##Print out report
   PrintMe(reportfile,"--------------------------------------------------------")
   PrintMe(reportfile," Report for PEBL Continuous Performance Task (PCPT)")
   PrintMe(reportfile, " Version 0.3")
   PrintMe(reportfile, " http://pebl.sf.net")
   PrintMe(reportfile, " (c) 2006 Shane T. Mueller, Ph.D.")
   PrintMe(reportfile, " "+GetPEBLVersion())
   PrintMe(reportfile, " "+TimeStamp())
   PrintMe(reportfile, " Participant Code: " + gSubNum)
   PrintMe(reportfile,"--------------------------------------------------------")
   PrintMe(reportfile,"Statistic        ISI:   1000" + Tab(1) +"2000" + Tab(1) + "4000")
   PrintMe(reportfile,"--------------------------------------------------------")
   PrintMe(reportfile,"Correct Trials   " +Tab(1)+ (corT1000 + corF1000) + "/" + trialspercond+ Tab(1) + (corT2000 + corF2000)+ "/" + trialspercond + Tab(1) + (corT4000 + corF4000) + "/" + trialspercond )
   PrintMe(reportfile,"Correct Targets  " +Tab(1)+ corT1000 + "/" + targ1000 + Tab(1) + corT2000 + "/" + targ2000 + Tab(1) + corT4000 + "/" + targ4000)
   PrintMe(reportfile,"Correct Foils    " +Tab(1)+ corF1000 + "/" + foil1000 + Tab(1) + corF2000 + "/" + foil2000 + Tab(1) + corF4000 + "/" + foil4000)
   PrintMe(reportfile,"Target Acc Rate  " +Tab(1)+ Rnd(corT1000/targ1000,3) + Tab(1) + Rnd(corT2000/targ2000,3) + Tab(1) + Rnd(corT4000/targ4000,3))
   PrintMe(reportfile,"Foil Acc Rate    " +Tab(1)+ Rnd(corF1000/Max([1,foil1000]),3) + Tab(1) + Rnd(corF2000/Max([1,foil2000]),3) + Tab(1) + Rnd(corF4000/Max([1,foil4000]),3))


   PrintMe(reportfile,"Commission Errors" +Tab(1)+ co1000 + Tab(1) + co2000 + Tab(1) + co4000)
   PrintMe(reportfile,"Ommission Errors " +Tab(1)+ om1000 + Tab(1) + om2000 + Tab(1) + om4000)
   PrintMe(reportfile,"Correct RT Mean  " +Tab(1)+ MeanX(rtCorr1000) + Tab(1) + MeanX(rtCorr2000) + Tab(1) + MeanX(rtCorr4000))
   PrintMe(reportfile,"Correct RT SD    " +Tab(1)+ SD(rtCorr1000) + Tab(1) +SD(rtCorr2000) + Tab(1) + SD(rtCorr4000))
   PrintMe(reportfile,"Error RT Mean    " +Tab(1)+ MeanX(rtInc1000) + Tab(1) + MeanX(rtInc2000) + Tab(1) + MeanX(rtInc4000))
   PrintMe(reportfile,"Error RT SD      " +Tab(1)+ SD(rtInc1000) + Tab(1) + SD(rtInc2000) + Tab(1) + SD(rtInc4000))
##  Add d' and beta here?
##
##
   PrintMe(reportfile,"--------------------------------------------------------")   


   ##Now, show debriefing info.
   SetText(gInstructions, "Thank you for participating in the experiment.  You may now leave.
  Report found in file: [pcpt-report-" +gSubNum  + ".dat]
  Data found in file:   [pcpt-"  + gSubNum + ".dat] 
  (Press 'X' to finish experiment)")
   Show(gInstructions)
   Draw()
   WaitForKeyPress("X")
   ShowCursor(1)
 }


##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{
  ##Initialize Window, etc.
  gWin <- MakeWindow("black")   
            
  ##Initialize Font and colors


   black <- MakeColor("black")
   white <- MakeColor("white")


   gInstructionsFont <- MakeFont(gPEBLBaseFont,0,16, black,white,1)  
   gStimFont <- MakeFont(gPEBLBaseFontMono,0,54, white, black,1)  
   gCorrFont <-  MakeFont(gPEBLBaseFontMono,0,30, MakeColor("green"), black,1)  
   gIncFont <-  MakeFont(gPEBLBaseFontMono,0,30, MakeColor("red"), black,1)  

   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 600,300)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-300, gVideoHeight/2-150)
   Hide(gInstructions)

   gStim <- MakeLabel("",gStimFont)
   AddObject(gStim, gWin) 
   Move(gStim, gVideoWidth/2, gVideoHeight/2)
   Hide(gStim)
   
   gFeedback <- MakeLabel("-",gStimFont)
   AddObject(gFeedback, gWin) 
   Move(gFeedback, gVideoWidth/2, gVideoHeight/2)
   Hide(gFeedback)
   ShowCursor(0)
 }



define PrintMe(file,text)
{
  FilePrint(file,text)
  Print(text)
}

define SD(list)
{
  if(Length(list)==0)
  {
    ret <- "NA" 
  } else {
    ret <- Round(StdDev(list)*100)/100
  }

  return ret
}


define MeanX(list)
{
  if(Length(list)==0)
  {
   ret <- "NA"  
  } else {
   ret <- Round(Mean(list)*100)/100
  }
  return ret
}

define Rnd(num,sig)
{
   x <-    Round( num *(10 ^ sig))/(10^sig)
  return x 
}
