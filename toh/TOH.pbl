
#################################################
##
##   PEBL's Tower of Hanoi
##
##   Released May 2010
##
##
##
## 
##
##
##
##
##
##
##
##
##
##
##
 
define Start(p)
{



##  Basic translations strings are assigned in GetStrings (see bottom of file).
##
##

   GetStrings("EN")

  gShowHand     <- 1  #Show the hand graphic?
  Init()


   ##  Comment out the following lines and replace with something like 
   ##  type <- "3"
   ##  to go directly to a test configuration.
   ## From here VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV


  gInstructions <- MakeTextBox("",gFont,760,560)
  AddObject(gInstructions,gWin)
  Move(gInstructions,20,20)


   stim <- MakeProblems3(10)  ## unconstrained pole height,
                              ## with number of disks in
							  ## order specified by first argument


   gUseTimer <- 0  ##This hard-codes use of timer. Uncomment to
                   ##override the defaults built into each particular test function.

   gTimeLimit <- 120   ##default time limit, in seconds.
   gUseTurnLimit <- 0  ##this hard-codes turn limits, overiding
                       ## setting in original definition
  
  gInstructions.text <- gInstText1

  if(gUseTimer)
   {
     gInstructions.text <- gInstructions.text + gInstText2
   }
  if(gUseTurnLimit)
   {
     gInstructions.text <- gInstructions.text +gInstText3
   }


  gInstructions.text <- gInstructions.text + CR(1) + gBegin
  gInstructions.font <- gFont2
  Draw()

  WaitForDownClick()
  Hide(gInstructions)
  Draw()
 
  InitPoles()

  FilePrint(gFileOut,"sub trial size current end step abstime trialtime clicktime done")
  FilePrint(gFileOutSum,"sub trial size shortest startlab endlab startconf endconf steps time")

  gInstructions.width <- 220
  gInstructions.height <- 520
  Move(gInstructions,565,50)
  gInstructions.text <- gContinue


  gTrial  <- 1

  loop(pair, stim)
  {
     TrialTOH(pair)
     gTrial <- gTrial + 1
  }

   gInstructions.text <- gDebriefing

   Show(gInstructions)
   Draw()
   WaitForAnyKeyPress()
}



  
define TrialTOH(pair)
{

    config <- First(pair)
    config1 <- Second(pair)

	startlab <- Third(pair)
    endlab <- Fourth(pair)
    shortest <- Fifth(pair)

    numdisks <- Length(Flatten(config))

    origstring <- MakeStateString(config)
    gMovesranout <- 0
    gTimeranout <- 0

    ## Make standard and new configurations
    c1 <- PlotDisksAnimate(config,440,gDisks,5)
    c2 <- PlotDisksAnimate(config1,120,gDisks2,5)
    if(shortest > 0 and gUseTurnLimit)    
    {
      cGraph <- MakeGraph(shortest,shortest,650,400,gClickLab,shortest)
    }

    startTime <- GetTime()
    lasttime <- GetTime()
    time <- GetTime()
    FilePrint(gfileout, gSubNum + " " + gTrial + " " + numdisks + " " +
                  MakeStateString(config) + " " +
                  MakeStateString(config1) + " 0 " + starttime + " 0 "+
                  (time - lasttime)  + " 0")
    #Allow disk moves until the two have identical configurations.
    continue <- 1
    step <- 1 
	gEndTime <- time + gTimeLimit*1000
    if(gUseTimer)
    {
      ##Timegraph defaults to 120 sec.
      ##the ticks hsould be every 10 sec, unless there are less than 4
      ## ticks. then every 5, then every 1 sec
      numticks <- gTimeLimit/10
      if(numticks < 4)
       {
         numticks <- gTimeLimit/5
       }
      if(numticks < 3)
       {
         numticks <- gTimeLimit
       }
    

      gTimeGraph <- MakeGraph(gTimeLimit,gTimeLimit,710,400,gTimeLab,numticks)
    }
    Draw()
    

    while(continue)
    {
      config <- MoveDisk(config)
      time <- GetTime()
      FilePrint_(gfileout, gSubNum + " " + gTrial + " " + numdisks + " " +
                 step + " " + time +
                  " " + (time - starttime) +" " + (time-lasttime))

      lasttime <- time

     if(ListEqual(config,config1))
       {
         success <- 1
         continue <- 0
         FilePrint(gfileout, " 1")
       } else {
         FilePrint(gfileout, " 0")
       }
    ##only update the graph if we have a good measure of
    ## shortest path, and if the global flag specifies it.
    if(shortest > 0 and gUseTurnLimit)
     {
        rem <- Max([0,shortest-step])
        UpdateGraph(cgraph,rem, 650,400,shortest)
        #if no moves remain:
        if(rem == 0)
         {
           #if continue == 0, we have solved the puzzle already. 
           if(continue == 0)
              {
                  success <- 1
              }else{
                  gMovesRanOut <- 1     
                  continue <- 0
                  success <- 0
              }
         }
     }
    if(gUseTimer)
     {  
         if(gTimeRanOut)
          {
              success <- 0
              continue <- 0
          }
     }

    Draw()

    step <- step + 1 


   }
 
    Wait(100)
   FilePrint(gFileOutSum, gSubNum + " " + gTrial + " " + numdisks + 
       " "+ shortest + " "  +   startlab+ " "+ endlab + " " +
       origstring  + " " +  MakeStateString(config1) + " " + success + " "+
      (step-1) + " " + (time-starttime))

   if(success)
    {
     gInstructions.text <- gContinue
    } else {
     gInstructions.text <- gIncomplete
     if(gMovesRanOut)
      {
        ginstructions.text <- gInstructions.text +gMovesOutLab
      }
     if(gtimeRanOut)
      {
        ginstructions.text <- gInstructions.text + gTimeOutLab
      }
    
      gInstructions.text <- gInstructions.text+CR(2)+ gContinue
    }
   RemoveObject(gInstructions,gWin)
   AddObject(gInstructions,gWin)
   Show(gInstructions)
   Draw()
   WaitForDownClick()
   Hide(gInstructions)
#   HideAll()

   if(gUseTimer)
    {
      RemoveComplex(gTimeGraph)
    }
    
   if(shortest > 0 and  gUseTurnLimit)
   { 
     RemoveComplex(cGraph)
   }

}


define HideAll()
{
   loop(i, Merge(gDisks,gDisks2))
   {
     Hide(i)
   }
}

define Init()
{
  gSleepEasy <- 1

  gPoleHeights <- 6
  gVideoWidth <- 800
  gVideoHeight <- 600
#  ShowCursor(0)
  gWin <- MakeWindow("black")
 
  gSubNum <- GetSubNum(gWin)
  ##  gPEBLBaseFont <- "Vera.ttf"  ##uncomment for version 0.10
  ##These may need to be changed for a particular language.
  gFont <- MakeFont(gPEBLBaseFont,0,15,MakeColor("white"),MakeColor("black"),1)
  gFont2 <- MakeFont(gPEBLBaseFont,0,24,MakeColor("white"),MakeColor("black"),1)
}

define InitPoles()
{
##Make hot zones for each stack.

   height <- (gPoleHeights)*30+15
   y <- 470-height/2
   r1 <-  Rectangle(170,y,150,height,MakeColor("white"),1)
   height <-(gPoleHeights)*30+15
   y <- 470-height/2
   r2 <-  Rectangle(325,y,150,height,MakeColor("white"),1)
   height <- (gPoleHeights)*30+15
   y <- 470-height/2
   r3 <-  Rectangle(480,y,150,height,MakeColor("white"),1)

   AddObject(r1,gWin)
   AddObject(r2,gWin)
   AddObject(r3,gWin)
   gZones <- [r1,r2,r3]

  gDisks <- []
  gDisks2 <- []


  loop(i,Sequence(1,6,1))
   {
          tmp <- MakeImage("png/disk"+i+".png")
          gDisks <- Append(gDisks,tmp)

          tmp <- MakeImage("png/disk"+i+".png")
          gDisks2 <- Append(gDisks2,tmp)

   }

   if(gShowHand)
    {
     gHand   <- MakeImage("png/hand.png")
     AddObject(gHand,gWin)
     Move(gHand,330,225)
    }


   footerfont <-   MakeFont(gPEBLBaseFont,0,20,MakeColor("grey"),MakeColor("black"),1)

   gFooter <- MakeLabel(gFooterLab,footerfont)
   AddObject(gFooter,gWin)
   Move(gFooter,300,490)

   gHeader <- MakeLabel(gHeaderLab,footerfont)
   AddObject(gHeader,gWin)
   Move(gHeader,325,165)
  ##Keep track of the image complex:
  gComplex <- []

  gRect <- Rectangle(325,80,460,140,MakeColor("white"),1)
  AddObject(gRect,gWin)

  gFileOut <- FileOpenAppend("toh-"+gsubnum+".txt")
  gFileOutSum <- FileOpenAppend("toh-summary-"+gsubnum+".txt")

 }



define PlotDisksAnimate(config,ybase,disks,steps)
{

  ydelta <- 20
  yheights <- Repeat(0,Length(disks))
  
  ##Get starting locations of disks.
  startxy <- []

  disks2 <- SubList(disks,1,Length(config))

  loop(i, disks2)
   {
     startxy <- Append(startxy, [i.x,i.y])
   }

  x <- 15
  complex <- []
  

  ##Go through each column of the config string
  endxy <- []

  loop(disk,config)
  {


   if(disk == 0)
     {
       endXY <- Append(endXY, [320,225])
     }else{

       endXY <- Append(endXY, [x+155*disk,ybase+Nth(yheights,disk)])
	   yheights <-AddToListItem(yheights,disk,-ydelta)
     }

  }

  ##Add the disks to the window.
  loop(disk,disks2)
   {

     AddObject(disk,gWin)
   }

  ##compute the xy vector that each disk must move on each step
  startend <- Transpose([startxy, endxy])
  stepxy <- []
  loop(i, startend)
   {
      start <- First(i)
      end <- Second(i)
      stepxy <- Append(stepxy,[(First(end)-First(start))/steps,
                               (Second(end)-Second(start))/steps])
   }


  ##animate for the steps.
  diskstep <- Transpose([disks2,endxy,stepxy])
  step <- 1
  while(step <= steps)
  {
    loop(i, diskstep)
     {
        disk <- First(i)
        end <- Second(i)
        diff <- Third(i)

        disk.x <- First(end) - First(diff)   * (steps-step)
        disk.y <- Second(end) - Second(diff) * (steps-step)
    }

   Draw()          
   step <- step + 1
  }

 return  complex
}


define AddToListItem(list,element,addend)
{
  newlist <- []
  index <- 1
  loop(i,list)
   {
     if(index == element)
      {
        tmp <- i + addend
      }else{
        tmp <- i
      }
   newlist <- Append(newlist, tmp)
   index <- index + 1
   }
 return newlist
}

define MoveDisk(config)
{



   if(gUseTimer)
   {
    cont <- 1
    while(cont)
    {
         first <- WaitForClickOnTargetWithTimeout(gZones, [1,2,3],100)
         if(first=="<timeout>")
           {
		      timeleft <- (gEndTime-GetTime())/1000
              if(timeleft < 0)
               {
                   gTimeRanOut <- 1
                   cont <- 0
               }
              UpdateGraph(gTimegraph,Max([0,timeleft]), 710,400,gTimeLimit)
              Draw()

           } else {
		   
              ##Make sure you click on on something with a disk.
			   if(IsMember(first,config))
                {
                 cont <- 0
                }
           }
    }

   } else {
       ##No timer, so use just standard click.
       first <- WaitForClickOnTarget(gZones, [1,2,3])

   }



    config <- RemoveDisk(first,config)
 
 
   if(1)
    {
      ##Remove the disk complex so it can be re-drawn
      RemoveComplex(gComplex)
	  gComplex <- PlotDisksAnimate(config,440,gDisks,5)
      Draw()


      cont <- 1
      while(cont)
      {
       #Now, get the target pile 1-3


     if(gUseTimer)
     {
      cont <- 1
      while(cont)
      {
         next <- WaitForClickOnTargetWithTimeout(gZones, [1,2,3],100)

         if(next=="<timeout>")
           {
		      timeleft <- (gEndTime-GetTime())/1000
              UpdateGraph(gTimegraph,Max([0,timeleft]), 710,400,gTimeLimit)
              Draw()
              if(timeleft < 0)
               {
                   gTimeRanOut <- 1
               }


           } else {
               cont <- 0
           }
       }

      } else {
        ##No timer, so use just standard click.
        next <- WaitForClickOnTarget(gZones, [1,2,3])
        while(not CheckValid(config,next))
         {
           next <- WaitForClickOnTarget(gZones, [1,2,3])
         }
          cont <- 0
       }

      }


      RemoveComplex(gComplex)
      config <- AddDisk(config,next)
      gComplex <- PlotDisksAnimate(config,440,gDisks,5)
      Draw()
    }
   return config
}

define RemoveComplex(x)
{ 
    loop(i,x)
    {
       RemoveObject(i,gWin)
    }
}

##Returns a string describing a state of the problem
define MakeStateString(config)
{
  string <- ""
  loop(i,config)
  {
      string <- string + i
  }  

  return string
}

##This works just on the data structure, not on the display.

define RemoveDisk(col,ind)
{

##It removes the topmost (smallest/rightmost) item on a column,
##setting it to 0

   rev <- Reverse(ind)
   removed <- 0

   newcomp <- []
   loop(i,rev)
   {

    if(i == col and removed == 0)
    {
        tmp <- 0
        removed <- 1
    } else {
        tmp <- i
    }
    newcomp <- Append(newcomp,tmp)
   }

  return Reverse(newcomp)
}


define AddDisk(config,nextcol)
{

  ##There is currently a disk in hand (marked 0)
  ## when you find it, mark it nextcol.
   newcomp <- []
   loop(i,config)
   {
   
    
    if(i==0)
    {
      newcomp <- Append(newcomp, nextcol)

    } else {
     newcomp <- Append(newcomp,i)
    }

   }

  return newcomp
}



##checks to see if the configuration is valid.
define CheckValid(config,next)
{

 ## We wanted to place the thing in 0 onto the next pile.
 ## It will only be legal if there are no smaller disks
 ## on that pile already.


   founddisk <- 0
   foundsmaller <- 0

    rev <- Reverse(config)
    
    loop(pile,rev)
     {
       if(pile==next)
	   {
	     foundsmaller <- 1
       }

       if(pile==0)
       {
         founddisk <- 1
         break
       }
     }


   ## At this point, if founddisk ==0, it is OK (no disk in hand)
   ##                                  even if foundsmaller==1
   ## if founddisk == 1, there is a disk in hand,
   ##      if foundsmaller == 1, there was a smaller disk on that pile; bad
   ##      if foundsmaller == 0, there is no smaller disk, OK

  if(founddisk == 0)
   {
     ok <- 1
   }else{

        if(foundsmaller == 1)
        {
         ok <- 0

        }else{
         ok <- 1
        }
   }
 return ok
}

define MakeProblems3(num)
{
   dists <-  TOH3Dists()
   states <-  TOH3states()
   
    i <- 1
   probs <- []
   while(i <= num)
   {
     probs <- Append(probs,MakeProblem3(states,dists))
  
     i <- i + 1
   }
 
  return probs  
}



##makes a problem of size 3
define MakeProblem3(probs,dists)
{
   startend <- SampleN(Sequence(1,27,1),2)
   startid <- First(startend)
   endid   <- Second(startend)

   startstate <- Nth(probs,startid)
   endstate   <- Nth(probs,endid)

   
   startlab <- ListToString(startstate)
   endlab <- ListToString(endstate)

   dist <-M(dists,startid,endid)

   return [startstate,endstate,startlab,endlab,dist]
}


define M(m,i,j)
{
  return Nth(Nth(m,i),j)
}



define MakeGraph(remaining,total,x,y,label,numticks)
{

    ##Sets up some basic parameters for plotting the graph at the bottom of the screen
    font <- MakeFont(gPEBLBaseFont,0,12,MakeColor("grey80"),MakeColor("black"),0)
    height <- 250
    dataheight <- remaining/total * height
    width  <- 20
    scale <- height/total      ##pixels/unit

    ycenter <- y
    xcenter <- x

    
	bgcol <- MakeColor("grey20")
#    fgcol <- MakeColor("red")
    fgcol <- MakeColorRGB(170,0,0)
    black <- MakeColor("grey80")

	
    #Create rectangle for background and for data
    back <- Rectangle(xcenter,ycenter, 70, height+50, bgcol, 1)
    data <- Rectangle(xcenter,ycenter + height/2 - dataheight/2, width, dataheight, fgcol, 1)
     lab <- MakeLabel(label,font)
     Move(lab,xcenter, ycenter+height/2+14)
     

    AddObject(back,gWin)
    AddObject(data,gWin)
    AddObject(lab,gWin)
    ##Create all the labels, based on yvals. Add each label to the 
    ##appropriate location, and combine them all into a single
    ##composite to make removal easier.
    ##These labels are all re-created each trial--they could be
    ##static, which would be a little more efficient, but it is really 
    ##fast as is.
    composite <-[back,data,lab]

	

    yvals <- Sequence(0, total, total/numticks)
   
     loop(i,yvals)
      { 
        yy <- MakeLabel(i+"", font)
        AddObject(yy,gWin)
        Move(yy,  xcenter-20, ycenter + height/2 - i*scale)
        Show(yy)
        composite <- Append(composite,yy)
		tick <- Line(Floor(xcenter-width/2),ycenter+height/2-i*scale,width,0,black)
        AddObject(tick,gWin)
        composite <- Append(composite,tick)
        
      }
    Draw()


    return composite
}

define UpdateGraph(myGraph, remaining, x,y, total)
{

    ##Sets up some basic parameters for plotting the graph at the bottom of the screen

    height <- 250
    dataheight <- remaining/total * height

    ycenter <- y
    xcenter <- x

    #Extract the data from graph.
    data <- Second(myGraph)
    data.height <- dataheight
    data.y <- Floor(ycenter + height/2 -dataheight/2)

}



##targetlist is a set of graphical objects,
##keylist is a set of keys whose corresponding 
##value should be returned when a graphical object is clicked upon.

define WaitForClickOnTargetWithTimeout(targetlist,keylist,time)
{

  ret <- ""
  testlist <- Transpose([targetlist,keylist])
   
   wait1 <- 1
   while(wait1)
     {
      wait2 <- 1
      while(wait2)
       {
         pos <- WaitForMouseButtonWithTimeout(time)

		 if(Length(pos)==4)
          {
         if(Nth(pos,4)=="<pressed>")
          {
            wait2 <- 0
            gClick <- pos
          }
         } else {
            wait2 <- 0
			wait1 <- 0
            gClick <- [-1,-1]
            ret <- "<timeout>"
           
         }
       }

       ##only loop through the test if wait1 is 0; otherwise
       ##we timed out.
      if(wait1)
      {
       newtargs <- []

       loop(i,testlist)
          {

             if(Inside(pos,First(i)))
             {
			    wait1 <- 0
                ret <- Nth(i,2)
                break
             }
          }
     }
    }
  return ret
}


##
##
##

define ListEqual(l1,l2)
{
  if(Length(l1)==Length(l2))
  {
   same <- 1


   loop(i,Transpose([l1,l2]))
    {
     if(not (First(i) == Nth(i,2)))
      {
        same <- 0
      }

    }
   } else {
     same <- 0
   } 
  return same
}


## This provides basic translations.  To translate to a new language, copy the text between
##  elseif(lang== "es") and }else{
##  and past before the final }else{, ensuring you have a single pair of matching brackets.
##  Then translate each english string to your language of choice.  Be sure to not include line breaks unless you mean it.
##  also, make a 2-character
##  label to specify your language.  Then, change the 'Getstrings("en") at the top of the file to 
##  be your language of choice.  Finally, copy the function into an email and send to the pebl email list
##  at pebl-list@lists.sourceforge.net, so others can enjoy your labor.

define GetStrings(language)
{

   lang <- Uppercase(language)
  if(lang == "EN") 
   {
    gSelect <- "Type number of test to use:"

    gHeaderLab <- "Target Stacks"
    gFooterLab <- "Click on pile to pick up and drop disk"

    gInstText1 <- "You are about to perform a task called the 'Tower of London'.  Your goal is to move a pile of disks from their original configuration to the configuration shown on the top of the screen.  You can only move one disk at a time, and you cannot move a disk onto a pile that has no more room (indicated by the size of the grey rectangle).  To move a disk, click on the pile you want to move a disk off of, and it will move up above the piles.  Then, click on another pile, and the disk will move down to that pile."
    gInstText2 <- " You will have a time limit to finish each problem.  Attempt to finish each problem within the allotted time."
    gInstText3 <- " You will have only a limited number of moves to solve each problem. Before you make your first move, think about the problem to make sure you can solve it within your move limit.  If you do not finish the problem within the limit, the turn will end and you will move on to the next problem."
    gBegin <-  "Click the mouse to begin."
    gContinue <- "Trial Complete. "+CR(2)+ "Click mouse to continue to the next trial."
    gIncomplete <- "Trial Incomplete. "
    gClickLab <- "Clicks"
    gTimeLab <-  "Time (s)"
    gMovesOutLab <-  "You failed to complete the problem in the number of moves required."
    gTimeOutLab <-  "You ran out of time."
    gDebriefing <- "Thank you for participating. The experiment is now complete.  Press any key to exit."

   } elseif(lang=="ES"){

     ## Note, this is not a proper Spanish translation.
     ##
    gSelect <-  "Edit TOL.pbl directly to specify a test configuration automatically."

    gHeaderLab <- "Objetivo montóns:"
    gFooterLab <- "Haga clic en pila para recoger y llevar a disco"
    gInstText1 <- "Estás a punto de realizar una tarea llamada 'Torre de Su Londres'. Objetivo es pasar un montón de discos desde su configuración original a la configuración mostrada en la parte superior de la pantalla. Sólo puedes mover un disco a la vez, y no se puede mover un disco sobre un montón que no tiene más espacio (indicado por el tamaño del rectángulo gris). Para mover un disco, haga clic en el montón que desea mover un disco fuera de, y se moverá hacia arriba por encima de la pila. A continuación, haga clic en otra pila, y el disco se moverá hasta que el montón. "
    gInstText2 <- " Tendrá un límite de tiempo para terminar cada problema. Intento de terminar cada problema en el tiempo asignado."
    gInstText3 <- " Usted tendrá solamente un número limitado de movimientos para resolver cada problema. Antes de hacer su primer movimiento, pensar en el problema para asegurarse de que puede resolver dentro de su límite de movimiento. Si no termina el problema en el límite, el a su vez terminará y se trasladará al siguiente problema."
    gBegin <-  "Haga clic en el ratón para empezar."
    gContinue <- "Prueba Completa. "+ CR(1) +" Haga clic en el ratón para continuar a la siguiente prueba. "
    gIncomplete <- "Prueba Incompleta. "
    gClickLab <- "Clics"
    gTimeLab <-  "Tiempo (s)"
    gMovesOutLab <-  "Usted no pudo completar el problema del número de movimientos necesarios."
    gTimeOutLab <-  "Usted acabó el tiempo."
    gDebriefing <- "Gracias por participar. El experimento ya está completa. Pulse cualquier tecla para salir."


    } else{
     Print("Language: ["+lang+"] unknown.  Falling back on English translations.")
     GetStrings("en")
   }
}



define TOH3states()
{
  ##These are the 27 states in TOH-3
  x <- [[1,1,1],[1,1,2],[1,1,3],[1,3,2],[1,2,3],[1,3,3],[1,3,1],[1,2,1],[1,2,2],[2,3,3],
        [3,2,2],[2,3,1],[2,3,2],[3,2,3],[3,2,1],[2,2,1],[2,1,2],[3,1,3],[3,3,1],[2,2,2],
        [2,2,3],[2,1,3],[2,1,1],[3,1,1],[3,1,2],[3,3,2],[3,3,3]]

  return x
}



define TOH3Dists()
{
  dist <- FoldList([0,1,1,2,2,3,3,3,3,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,
1,0,1,1,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,6,6,7,7,7,7,
1,1,0,2,1,3,3,2,2,4,3,5,5,4,4,6,6,5,5,7,7,7,7,6,6,6,6,
2,1,2,0,3,1,1,2,3,2,4,3,3,5,5,4,4,6,6,5,5,5,5,6,7,7,7,
2,2,1,3,0,3,2,1,1,4,2,5,5,3,3,6,6,4,4,7,7,7,6,5,5,5,5,
3,2,3,1,3,0,1,2,3,1,4,2,2,5,5,3,3,6,6,4,4,4,4,5,6,7,7,
3,2,3,1,2,1,0,1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,
3,3,2,2,1,2,1,0,1,3,2,4,4,3,3,5,5,4,4,6,6,6,6,5,5,5,5,
3,3,2,3,1,3,2,1,0,4,1,5,5,2,2,6,6,3,3,7,7,6,5,4,4,4,4,
4,3,4,2,4,1,2,3,4,0,5,1,1,6,6,2,2,5,7,3,3,3,3,4,5,6,7,
4,4,3,4,2,4,3,2,1,5,0,6,6,1,1,7,5,2,2,7,6,5,4,3,3,3,3,
5,4,5,3,5,2,3,4,5,1,6,0,1,6,7,1,2,5,7,2,2,3,3,4,5,6,7,
5,4,5,3,5,2,3,4,5,1,6,1,0,5,6,2,1,4,6,3,3,2,2,3,4,5,6,
5,5,4,5,3,5,4,3,2,6,1,6,5,0,1,6,4,1,2,6,5,4,3,2,2,3,3,
5,5,4,5,3,5,4,3,2,6,1,7,6,1,0,7,5,2,1,7,6,5,4,3,3,2,2,
6,5,6,4,6,3,4,5,6,2,7,1,2,6,7,0,3,5,7,1,1,2,3,4,5,6,7,
6,5,6,4,6,3,4,5,6,2,5,2,1,4,5,3,0,3,5,3,2,1,1,2,3,4,5,
6,6,5,6,4,6,5,4,3,5,2,5,4,1,2,5,3,0,3,5,4,3,2,1,1,2,3,
6,6,5,6,4,6,5,4,3,7,2,7,6,2,1,7,5,3,0,7,6,5,4,3,2,1,1,
7,6,7,5,7,4,5,6,7,3,7,2,3,6,7,1,3,5,7,0,1,2,3,4,5,6,7,
7,6,7,5,7,4,5,6,7,3,6,2,3,5,6,1,2,4,6,1,0,1,2,3,4,5,6,
7,6,7,5,7,4,5,6,6,3,5,3,2,4,5,2,1,3,5,2,1,0,1,2,3,4,5,
7,6,7,5,6,4,5,6,5,3,4,3,2,3,4,3,1,2,4,3,2,1,0,1,2,3,4,
7,7,6,6,5,5,6,5,4,4,3,4,3,2,3,4,2,1,3,4,3,2,1,0,1,2,3,
7,7,6,7,5,6,6,5,4,5,3,5,4,2,3,5,3,1,2,5,4,3,2,1,0,1,2,
7,7,6,7,5,7,6,5,4,6,3,6,5,3,2,6,4,2,1,6,5,4,3,2,1,0,1,
7,7,6,7,5,7,6,5,4,7,3,7,6,3,2,7,5,3,1,7,6,5,4,3,2,1,0],27)

  return dist
}
