#!/usr/local/bin/pebl
#################################################################
##  PEBL Pattern Comparison Task Version 0.1
## 
##  For use with PEBL 0.09 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Test Battery
##  2008 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  This is a version that just requires a single decision per condition:
##   same or different.
## 
##  See: Perez, W. A. Masline, P. J., Ramsey, E. g., and Urban, K. E.,
##       (1987). Unified tri-services cognitive performance assessment
## 		 battery: Review and methodology.  DTIC AAMRL-TR-87-007. 
##
##
##
#################################################################

 define Start(p)
{

  gSimilarFoil <- 1
  gfoildiff    <- 3  #Number of changes between target and foil

  gSize <- 4  #Number of rows/columns in the matrix
  giveFeedback <- 1  
  condsize <- 10  ##total trials will be 12 x condsize
                  ## 2 response conditions x
                  ## 4 levels of difference; 0x3 + 1,2,3
                  ## (There are an equal number of same and different trials)

  gDeadline <- 1500

  gSleepEasy <- 1
  ShowCursor(0)

  gWin <- MakeWindow()
  gbackground  <-  MakeColor("navyblue")
  gDotColor    <-  MakeColor("white")
  gFileOut <- FileOpenWrite("patcompsd-"+gSubNum+".txt")

  instruc <- "This test examines your ability to compare two patterns simultaneously.  The computer will present two patterns of dots to you, side by side on the screen.  You must decide, as quickly and accurately as possible, if  the two patterns are the same. You will indicate your answer by pressing the left or right shift keys on the keyboard. Press the left shift key  if the patterns on the screen are identical, or  the right shift key if the patterns are different. Once you press a key, the patterns will disappear, so it is important that you know your answer before you press either button. 


Press any key to begin"


  gInstsame <- "Press space bar if stimuli are THE SAME"
  gInstdiff <- "Press space bar if stimuli are DIFFERENT"
  gFooter <- EasyLabel(gInstSame,gVideoWidth/2,gVideoHeight-20,gWin,24) 

  gFontcorr <- MakeFont(gPEBLBaseFont,0,40,MakeColor("darkgreen"),MakeColor("grey"),1)
  gFontinc <-MakeFont(gPEBLBaseFont,0,40,MakeColor("red"),MakeColor("grey"),1)
  gFeedback <- MakeLabel("",gFontcorr)
  AddObject(gFeedback,gWin)
  Move(gFeedback,gVideoWidth/2,gVideoHeight/2)
  Hide(gFeedback)

  ##Provide initial instructions
  gInst <- EasyTextBox(instruc,50,50,gWin,16,gVideoWidth-100,gVideoHeight-200)
  Draw()

  condSame <- Shuffle(Transpose([Merge(Repeat("same",condsize*3),
                                       Repeat("diff",condsize*3)),
									   Repeat("s",condsize*2*3),	
                             RepeatList([1,2,3],condsize*2)]))

  condDiff <- Shuffle(Transpose([Merge(Repeat("same",condsize*3),
                                       Repeat("diff",condsize*3)),
						     Repeat("d",condsize*2*3),
                             RepeatList([1,2,3],condsize*2)]))

  Print(Length(condSame))
  Print(Length(condDiff))

  WaitForAnyKeyPress()
  Hide(gInst)
  Draw()

  ## Print file header
  FilePrint(gFileOut,"subnum trial samediff cond delta mat1 mat2 abstime rt resp corr")
  
  RunBlock(1,condSame,"s")
  gInst.text <- "Now, we will reverse the instructions: Only press the space bar when the two patterns are DIFFERENT.  Press any key to begin"

  Show(gInst)
  Draw()
  gFooter.text <- gInstDiff
  WaitForAnyKeyPress()
  Hide(gInst)

  Draw()
  RunBlock(2,condDiff,"d")

  gInst.text <- "Thank you for participating.  Please alert the experimenter that you are complete"
  Show(gInst)
  Draw()
  Wait(1000)
  WaitForAnyKeyPress()

}


define RunBlock(block,conds,lab)
{

  trial <- 1
  loop(cond,conds)
   {

   stimcond <- First(cond)
   respcond <- Nth(cond,2)
   diff <- Nth(cond,3)

   startTime <- GetTime()
   ##Create test matrix 

   if(gSimilarFoil)
     {
        mats <- MakeMatrices(diff)
        matrix <- First(mats) 
        foil <- Nth(mats,2)
     } else {
        matrix <- MakeMatrix()
        foil <- MakeFoil(matrix)
     }
  

   if(stimcond == "same")
   { 
      alt <- matrix
      diff <- 0
   } else {
      alt <- foil
   }


   FilePrint_(gFileOut,gsubnum + " " + trial + " " + stimcond + " " +  respcond + " " + diff + " ")
   FilePrint_(gFileOut,ListToString(Flatten(matrix))+ " ")
   FilePrint_(gFileOut,ListToString(Flatten(alt))+ " ")
   
 ##Present the study matrix
    if(lab == "s")
    {
       gFooter.text <- gInstSame
    } else { 
       gFooter.text <- gInstDiff

    }
    
    x <- DisplayMatrices(matrix,alt)
    Draw()  
    t1 <- GetTime()
    resp <- WaitForListKeyPressWithTimeout([" "],gDeadline,1)
    t2 <- GetTime()

        
	responded <- not IsList(resp)
    if(respcond == "s")
    {
      ##Response condition is "same": only respond when same
	  
       corr <- ((not responded) and stimcond == "diff") or 
               ( responded and stimcond == "same")

    } else {
      ##Response condition is "different' only respond when different.

       corr <- ((not responded) and stimcond == "same") or 
               (responded and stimcond == "diff")
    }
    

    if(IsList(resp))
     {
       respcode <- "timeout"
     } else {
       respcode <- "X"
     }


    FilePrint(gFileOut, starttime + " " + (t2-t1) + " " + respcode + " " + corr)

    if(giveFeedback)
    {
        if(corr)
        {
          gFeedback.font <- gFontCorr
          gFeedback.text <- "Correct"
          delay <- 300
        } else {
          gFeedback.font <- gFontInc
          gFeedback.text <- "Incorrect"
          delay <- 300
        }

     Show(gFeedback)
     Draw()
     Wait(delay)
     RemoveComplex(x,gWin)
     Hide(gFeedback)
     Draw()
     Wait(100)
    }
    trial <- trial +1
   }


}


define DisplayMatrices(mat,mat2)
{

   xcells <- Length(mat)
   ycells <- Length(First(mat))

   x1center <- gVideoWidth/4
   x2center <- gVideoWidth-x1center
   ycenter <- gVideoHeight/2

   xsize <- 200
   ysize <- 200

   upper <- ycenter-ysize/2
   lower <- ycenter+ysize/2

   left1 <- x1center-xsize/2
   right1 <- x1center+xsize/2

   left2 <- x2center-xsize/2
   right2 <- x2center+xsize/2

   xjump <- xsize/xcells
   yjump <- ysize/ycells
   circlesize <- Min([xsize,ysize])/(gSize*2)-5

  complex <- []

  #First, make the lines
  
  ##draw the background square
  back1 <- Rectangle(x1center,ycenter,xsize,ysize,gbackground,1)
  AddObject(back1,gWin)
  complex <- Append(complex,back1)
  ##draw the background square
  back2 <- Rectangle(x2center,ycenter,xsize,ysize,gbackground,1)
  AddObject(back2,gWin)
  complex <- Append(complex,back2)

  ##Draw the dots for the standard
   row <- 1
   loop(line, mat)
     { 
        col <- 1
        loop(cell,line)
         {
           if(cell==1)
           {
             x <- Circle(left1+(col-.5)*xjump,upper+(row-.5)*yjump,circlesize,gDotColor,1)
             AddObject(x,gWin)
             complex <- Append(complex,x)
           }
           col <- col +1
         }
      row <- row + 1
     }

   ##draw dots for comparison.
   row <- 1
   loop(line, mat2)
     { 
        col <- 1
        loop(cell,line)
         {
           if(cell==1)
           {
             x <- Circle(left2+(col-.5)*xjump,upper+(row-.5)*yjump,circlesize,gDotColor,1)
             AddObject(x,gWin)
             complex <- Append(complex,x)
           }
           col <- col +1
         }
      row <- row + 1
     }

 return complex
}

define MakeMatrix()
{
  ##fill half the cells.

  numDots <- Floor(gsize * gsize /2)
  numempty <- gsize * gsize - numDots  

  dots <- FoldList(Shuffle( Merge(Repeat(1,numDots),
  	                              Repeat(0,numEmpty))), gSize)

  return dots
}


##This creates a matrix and a foil
define MakeMatrices(diff)
{

  #How many dots should be perturbed?

  ##fill half the cells.

  numDots <- Floor(gsize * gsize /2)
  numempty <- gsize * gsize - numDots  
  standard <- Merge(Repeat(1,numDots), Repeat(0,numEmpty))
  foil <- Rotate(standard,diff)
  tmp <- Transpose(Shuffle(Transpose([standard,foil])))

  targ <- FoldList(First(tmp),gSize)
  foil <- FoldList(Nth(tmp,2),gSize)

  return [targ,foil]
}


define RemoveComplex(comp,win)
{
  loop(i,comp)
  {
    RemoveObject(i,win)
  }
}

define RotateMatrix(mat,dir)
{
  if(dir == "<left>")
  {
   newmat <- Reverse(Transpose(mat))
  } elseif(dir == "<right>") {
   newmat <- Transpose(Reverse(mat))
  } else {
   newmat <- CopyMatrix(mat)
  }
  
  return newmat
}


define PrintMatrix(m)
{
  loop(i,m)
  {
    PrintList(i)
  }
}


define CopyMatrix(m)
{
   newmat <- []
   loop(i,m)
   { 
    tmp <- []
     loop(j,i)
     {

      tmp <- Append(tmp,j)
     }
     newmat <- Append(newmat,tmp)
   }
   return newmat
}

define MakeFoil(mat)
{
  bad <- 1
  while(bad)
  {
     bad <- 0
     newMat <- MakeMatrix()
    if(MatrixEqual(mat,newmat) or
  	   MatrixEqual(mat,Reverse(Transpose(newmat))) or
       MatrixEqual(mat,Transpose(Reverse(newmat))) or
       MatrixEqual(mat,Reverse(newmat)))
     {
        bad <- 1
     }
  }
 
 return newmat
}


define MatrixEqual(m1,m2)
{

  equal <- 1
  test <- Transpose([m1,m2])
  loop(i,test)
  {
    ii <- Transpose(i)
    loop(j, ii)
    {
      if(not (First(j) ==Nth(j,2)))
       { 
            equal <- 0 
       }
    }
   
  } 
  
  return equal
}
