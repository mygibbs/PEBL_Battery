#!/usr/local/bin/pebl
#################################################################
##  PEBL Matrix Rotation Task Version 0.2
## 
##  For use with PEBL 0.09 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Test Battery
##  2008 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  This is a simple version of the 'matrix rotation' task
##  described in the UTC Test Battery test # 11
## 
##  See: Perez, W. A. Masline, P. J., Ramsey, E. g., and Urban, K. E.,
##       (1987). Unified tri-services cognitive performance assessment
## 		 battery: Review and methodology.  DTIC AAMRL-TR-87-007. 
##
##  See original versions by Phillips (1974) and Damos & Lyall (1984).
##
##  Phillips, W. A. (1974.) On the Distinction Between Sensory Storage
##    and Short Term Visuel Memory, Perception and Psychophysics, 16,
##     283-290.
##
##  Damos, D. L. and E. A. Lyall. (1984). The Effect of Asymmetric 
##    Transfer on Dual Task Assessment of Voice Technology, 
##	   Proceedings of the Human Factors Society 28th Annual Meeting,
##     Volume 1, 21-26.
##
##
#################################################################

 define Start(p)
{


  gSize <- 6  #Number of rows/columns in the matrix
  giveFeedback <- 1  
  condsize <- 10

  gSleepEasy <- 1

  gWin <- MakeWindow()
  gLinecolor <- MakeColor("Black")
  gCellempty <- MakeColor("grey20")
  gCellFull  <-  MakeColor("orange")
  gFileOut <- FileOpenWrite("matrot-"+gSubNum+".txt")

  instruc <- "This experiment will examine your ability to mentally rotate one figure to compare it with another. You will see a 5 by 5 grid, with five of its cells lighted. You should learn the pattern as quickly and as accurately as possible, and then press a button on the keyboard when you are sure you know the pattern. As soon as you press the key, a new pattern will be presented.   If the new pattern is the same as the old pattern, but turned 90 degrees to the left or right, press the left shift key on the keyboard. If the pattern is not a 90 degree left or right rotation of the old pattern, press the right shift key on the keyboard.  If you have any questions, please ask the experimenter now.

Press any key to begin"

  inst1 <- "Press any key to view test matrix"
  inst2 <- "SAME        respond using shift keys      DIFFERENT"

  gFooter <- EasyLabel(inst2,gVideoWidth/2,gVideoHeight-20,gWin,24) 

  ##Provide initial instructions
  inst <- EasyTextBox(instruc,50,50,gWin,16,gVideoWidth-100,gVideoHeight-200)
  Draw()

  conds <- Shuffle(Merge(Repeat("same",condsize),
                          Repeat("diff",condsize)))
  WaitForAnyKeyPress()
  Hide(inst)
  Draw()

  ## Print file header
  FilePrint(gFileOut,"subnum trial samediff dir mat1 mat2 studytime rt resp corr")

  trial <- 1
  loop(cond,conds)
   {

   ##Create test matrix 
   matrix <- MakeMatrix(gSize)

   ##Choose the rotation direction for test matrix.
   dir <- Sample(["<right>","<left>"])

   starttime <- GetTime()
   FilePrint_(gFileOut,gsubnum + " " + trial + " " + cond + " " + dir + " " )

   if(cond =="same")
    {
      alt <- matrix
    } else {
      alt <- MakeFoil(matrix)
    }
    #Create the test matrix
    test <- RotateMatrix(alt,dir)

    FilePrint_(gFileOut,ListToString(Flatten(matrix))+ " ")
	FilePrint_(gFileOut,ListToString(Flatten(test))+ " ")
   
 ##Present the study matrix
    gFooter.text <- inst1
    x <- DisplayMatrix(matrix)
    Draw()  
    WaitForAnyKeyPress()
    t1 <- GetTime()
    RemoveComplex(x,gWin)

 ## Present the test matrix
    gFooter.text <- inst2
    x <- DisplayMatrix(test)
    Draw()  
    resp <- WaitForListKeyPress(["<lshift>","<rshift>"])
    RemoveComplex(x,gWin)
    t2 <- GetTime()
    
    corr <- (resp == Lookup(cond,["same","diff"],["<lshift>","<rshift>"]))
    FilePrint(gFileOut,(t1-starttime) + " " + (t2-t1) + " " + resp + " " + corr)      

    if(giveFeedback)
    {
        if(corr)
        {
         gFooter.text <- "Correct"
        } else {
         gFooter.text <- "Incorrect"
        }
     Draw()
     Wait(800)
     

    }
    trial <- trial +1
   }

}


define DisplayMatrix(mat)
{

   xcells <- Length(mat)
   ycells <- Length(First(mat))

   xcenter <- gVideoWidth/2
   ycenter <- gVideoHeight/2

   xsize <- 300
   ysize <- 300

   upper <- ycenter-ysize/2
   lower <- ycenter+ysize/2
   left <- xcenter-xsize/2
   right <- xcenter+xsize/2

   xjump <- xsize/xcells
   yjump <- ysize/ycells


  complex <- []

  #First, make the lines
  
  ##draw the background square
  back <- Rectangle(xcenter,ycenter,xsize,ysize,gcellempty,1)
  AddObject(back,gWin)
  complex <- Append(complex,back)

  ##Draw the 'present' cells

   row <- 1
   loop(line, mat)
     { 
        col <- 1
        loop(cell,line)
         {
           if(cell==1)
           {
             x <- Rectangle(left+(col-.5)*xjump,upper+(row-.5)*yjump,xjump,yjump,gCellFull,1)
             AddObject(x,gWin)
             complex <- Append(complex,x)
           }
           col <- col +1
         }
      row <- row + 1
     }


  ##Finally, draw lines on top
  loop(i,Sequence(0,xcells,1))
  {
    l <- Line(left,upper+yjump*i,xsize,0,gLinecolor)
    AddObject(l,gWin)
    complex <- Append(complex,l)
  }

  loop(i,Sequence(0,ycells,1))
   {

    l <- Line(left+xjump*i,upper,0,ysize,gLinecolor)
    AddObject(l,gWin)
    complex <- Append(complex,l)
   }
 return complex
}

define MakeMatrix(p)
{

  good <- 0
  while(not good)
   {
      tmp <- Shuffle(Sequence(1,gSize,1))
      good <- CheckMatrix(tmp)
   }

  base <- Merge([1],Repeat(0,gSize-1))
  mat <- []
  loop(i,tmp)
  {
     mat <- Append(mat, Rotate(base,i-1))
  }

  return mat
}

define RemoveComplex(comp,win)
{
  loop(i,comp)
  {
    RemoveObject(i,win)
  }
}

define RotateMatrix(mat,dir)
{
  if(dir == "<left>")
  {
   newmat <- Reverse(Transpose(mat))
  } elseif(dir == "<right>") {
   newmat <- Transpose(Reverse(mat))
  } else {
   newmat <- CopyMatrix(mat)
  }
  
  return newmat
}


define PrintMatrix(m)
{
  loop(i,m)
  {
    PrintList(i)
  }
}


define CopyMatrix(m)
{
   newmat <- []
   loop(i,m)
   { 
    tmp <- []
     loop(j,i)
     {

      tmp <- Append(tmp,j)
     }
     newmat <- Append(newmat,tmp)
   }
   return newmat
}

define MakeFoil(m)
{
  
  size <- Length(m)
  bad <- 1
  while(bad)
  {
 #Take one of the rows and move it to a new spot.
  standard <- Sequence(1,size,1)
  rows <- ChooseN(Sequence(1,size,1),2)
  neword <- Replace(standard, [rows,Reverse(rows)])

  try <- SortBy(m,neword)
   if(CheckMatrix(try))
     {
       bad <- 0
     }
  }

  return try
}

define MatrixEqual(m1,m2)
{

  equal <- 1
  test <- Transpose([m1,m2])
  loop(i,test)
  {
    ii <- Transpose(i)
    loop(j, ii)
    {
      if(not (First(j) ==Nth(j,2)))
       { 
            equal <- 0 
       }
    }
   
  } 
  
  return equal
}


define CheckMatrix(list)
{

  seq <- Sequence(1,Length(list),1)
  
  ok <-1
  if(list == seq or
     list == Reverse(seq))
   {
    ok <- 0
   }

 return ok
}
