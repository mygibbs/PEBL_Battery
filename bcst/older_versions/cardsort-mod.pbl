#!/usr/local/bin/pebl
###########################################################
##  Berg's Card Sorting Task, Version 0.6
##  (better known as the Wisconsin Card Sorting Test (tm)).
##  For use with PEBL 0.06 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Testing Battery
##  2006-03 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  as found in:
##  E. A. Berg. (1948). A simple objective technique for measuring
##     flexibility in thinking. J. Gen. Psychol. 39: 15-22.
## 
## 
## Polish translation contributed by Artur Pilacinski
## Korean translation contributed by Hyunsoo ra ma 
## Chinese translation contributed by Yu-Hsiang Wu 
###########################################################
##  Raw data file outputs:
##  subnum, trialnum, category count, color, shape, number, response, accuracy
##  perseveration count, absolute time, response time.
define Start(lpar)
{
    

  ## repeats is the number of times you go through the deck (deck size 
  ## depends on whether useReduced is 0 or 1).
  repeats <- 2

  ## This is how long of a run is required before switching categories.
  ## Note: Versions 0.1 -0.2 of BCST used runlength 5 by default.
  ## This is now changed to be 10, which according to the Neuropsych
  ## Assessment Handbook is the typical version.

  runlength <- 10

  ## useCanonical determines whether the 'stimulus' cards are the same
  ## as in Berg, or whether they are chosen randomly.
  useCanonical <- 1

  ## Reduced uses a 24-card deck, removing cards sharing  2+
  ## attributes with stimulus cards
  ## See Nelson HE: A modified card sorting test sensitive to 
  ##        frontal lobe defects. Cortex 1976;12:313-324.
  ## Note: modified card sort also may use shorter runlength.
  useReduced <- 0

  gUseMouse <- 1   #0 for keyboard 1-4, 1 for mouse entry.

  if(gUseMouse)
   {
    tag <- "-mouse"
   }else {

    tag <- "-keyboard"
   }
 
  ## The labels/instructions live in the file labels-en.txt.  Change
  ## that file to translate to a new language.

  textlist <- FileReadList(Lowercase("translations/labels-"+gLanguage+ tag +".txt"))
  gPromptText <- Nth(textlist,5)
  gCorrectText <-Nth(textlist,6)
  gIncorrectText <- Nth(textlist,7)
 

  

  gSleepEasy <- 1
	persevs <- []
	unambiguousList <- []
  totCorr <- 0
  totPers <- 0
  totPersErr <- 0
  totUnique <- 0   ##Counts number of 'unique' errors; errors that are not correct by another rule.

  persrun <- []  
  persrunflag <- 1

  ## Initialize global objects for use later. Defined at end of file
  Initialize()
  if(gUseMouse==0)
   {
     ShowCursor(0)  #hide the cursor
   }

   gColors <-  ["Red", "Green","Yellow","Blue"]
   gShapes <-  ["Triangle","Star","Cross","Circle"]
   gNumbers <- ["1","2","3","4"]
   rules <-[1,2,3] ##ShuffleWithoutAdjacents([[1,1,1],[2,2,2],[3,3,3]])

  ##Mix up the order if we aren't using canonical stimulus cards.
  if(not useCanonical)
   {
     gColors <- Shuffle(gColors)
     gShapes <- Shuffle(gShapes)
   }
  
  csn <- DesignFullCounterbalance(DesignFullCounterbalance(gColors,gShapes),gNumbers)


	## this goes through the card deck and finds all the cards that are unambiguous
	## then it puts them in a list for later use in PrintReport()
	loop(i, csn)
	{
		col <- First(First(i))
		shape <- Nth(First(i),2)
		num   <- Nth(i,2)

		#compare the card to each pile-card; counting matching features       

		maxmatch <- 0
		cards <- Transpose([gColors,gShapes,gNumbers])
		loop(card,cards) 
		{
			matches <- (col==First(card)) + (shape ==Nth(card,2)) + (num==Nth(card,3))
			maxmatch <- Max([matches,maxmatch])

		}

		##only add to the used deck if it matches on fewer than two features.
		if(maxmatch == 1)
		{
		    unambiguousList <- Append(unambiguousList, 1) ## the card is ambiuous
		} else { 
		    unambiguousList <- Append(unambiguousList, 0) 
	    } ## the card is unambiguous
	}
	
	unambiguousList <- Flatten(Repeat(unambiguousList,2))
    
    
  decksize <- Length(csn)

  stimcat <- FoldList(Flatten(Repeat(csn,repeats)),3)

  images<-[]
 
  loop(i,stimcat)
  {
    filename <- "png/" + ListToString(i) + ".png"
    x <- MakeImage(filename)
    images <- Append(images,x)

  }
  Draw()
  stim <-	Shuffle(Transpose(Append( Transpose(stimcat),images)))

   ## Give instructions; wait for them to hit a key, 
   SetText(gInstructions,Nth(textlist,1))
   Show(gInstructions)
   Draw()  
   WaitForIt()

   ## load canonical comparison cards.  This is perhaps supposed to
   ## be randomized.

   comps <- Transpose([gColors,gShapes,gNumbers])
   comp1 <- MakeImage("png/"+ListToString(First(comps))+".png")
   comp2 <- MakeImage("png/"+ListToString(Nth(comps,2))+".png")
   comp3 <- MakeImage("png/"+ListToString(Nth(comps,3))+".png")
   comp4 <- MakeImage("png/"+ListToString(Nth(comps,4))+".png")


   AddObject(comp1,gWin)
   AddObject(comp2,gWin)
   AddObject(comp3,gWin)
   AddObject(comp4,gWin)
   Move(comp1, 28 + 125/2, 105)
   Move(comp2, 28*2 + 125 + 125/2,105)
   Move(comp3, 28*3 + 125*2 + 125/2,105)
   Move(comp4, 28*4 + 125*3 + 125/2,105)

   if(gUseMouse == 0)
   {
     gHeader.text <- "1           2            3            4"
   }
   Move(gHeader,320,220)
   Show(gHeader)

	gInstructions.text <- Nth(textlist,2)
   Draw()
   WaitForIt()

   gInstructions.text <- Nth(textlist,3)
   Draw()
   WaitForIt()

   Hide(gInstructions)
   Show(gPrompt)
   Draw()
                 


  ####################################################
  ## Begin presenting and collecting data
  ####################################################
 

####################################################
##  Start the experimental trials.
## 

    report <- []
    respList <- []
    corrList <- []
    persList <- []
    trialsPerCat <- []
    errorsPerCat <- []
    rule <- First(rules)
    rules <- Rotate(rules,1)
    lastrule <- -1  
    firstCat <- 0
    run <- 0
    runFlag <- 0
    ## failure to maintain set
    ftms <- 0
    persev <- 0
    trialnum <- 1
    errors <- 0
    trials <- 0 
    numCats <- 0
    numCatsExp <- 1
    clr <- 0
    Print("CLR="+clr)
    uniqErr <- 0
  
  ##Loop through each stimulus card
   loop(s,stim)
   {
      trials <- trials + 1
      
      #Display the card
      card <- Nth(s,4)
      AddObject(card,gWin)
      Move(card,500,350)
 	  Draw()
      time0 <- GetTime()

	  ## Get the response
      if(gUseMouse)
      {  
         resp <- WaitForClickOnTarget([comp1,comp2,comp3,comp4],["1","2","3","4"])
         respList <- Append(respList, resp)
	}else{
         resp <- WaitForListKeyPress(["1","2","3","4"])
         respList <- Append(respList, resp)
	}
      time1 <- GetTime()
      rt <- time1 - time0

      ## Score the trial returns a pair.  [cur-rule, last-rule]
      ##
      corrBoth <- ScoreTrial(s,resp,rule,lastrule)

      
	  corrLast <- First(corrBoth)
      corr <- Nth(corrBoth,2)
      
      ## send correct responses to error file
      corrList <- Append(corrList, corr)

     ##Also compute whether the choice was correct for each given rule
      corrCol   <- Nth(gColors,ToNumber(resp)) == Nth(s,1)
      corrShape <- Nth(gShapes,ToNumber(resp)) == Nth(s,2)
      corrNum   <- Nth(gNumbers,ToNumber(resp))== Nth(s,3)
      
      if (not (corrCol or corrShape or corrNum)) {
          uniqErr <- uniqErr + 1
      }
      
      ##animate the card location.

      frames <- 6     
      #Get end location
      x <- 125/2 + 28*ToNumber(resp) + 125*(ToNumber(resp)-1)
      y <- 105

	  ydiff <- (y - card.y)/(frames)
      xdiff <- (x - card.x)/(frames)
      steps <- Sequence(frames,0,-1)
      #move toward end location
      loop(i,steps)
      {
        card.x <- x - xdiff*i
        card.y <- y - ydiff*i
        Draw()
      }

      RemoveObject(card,gWin)

      #If it is correct, update run counters
    if(corr == 1)
    {
        run <- run + 1
        
        ##if (run >= 3) {
            ## CLResps
        ##    if (run == 3 && runFlag == 0) {
        ##        clr <- clr + run
        ##        Print("CLR="+clr)
        ##    } else {
        ##        
        ##        clr <- clr + 1
        ##       Print("CLR="+clr)
        ##    }
        ##} else {
        ##    ## run that continues from last category
        ##    if (runFlag > 0) {
        ##        clr <- clr + 1
        ##        Print("CLR="+clr)
        ##    }
        ##}
        
        if (run >= 3 and runFlag == 0) {
            if(run == 3) { 
                clr <- clr + 3 
                Print("@trial=" + trialnum + ", CLR="+clr)
            } else { 
                clr <- clr + 1 
                Print("@trial=" + trialnum + ", CLR="+clr)
            }
        } else {
            if(runFlag == 1) { 
                clr <- clr + 1 
                Print("@trial=" + trialnum + ", CLR="+clr)
            }
        }
        
        totCorr <- totCorr + 1
        feedback <- gCorrect
    } else {
        ##It is incorrect.
        feedback <- gIncorrect     
        
        errors <- errors + 1
        
        ## tot num seq of 5+ matches that ends in error
        if (run > 4) {
            ftms <- ftms + 1
        }
        
        run <- 0
        runFlag <- 0
    }
 
     ##If it was correct according to the last rule, increment counters.
      if(corrLast == 1) {
           
           totPers <- totPers + 1
           persev <- persev + 1
           trialpersev <- 1	
           trialPersevErr <- 0
	   persList <- Append(persList, 1)



          ##If it was also an error, this is a perseverative error.
          if(corr==0 and Nth(unambiguousList, trials) == 0)
              {
                  totPersErr <- totPersErr +1 
                  trialPersevErr <- 1
                  ##Print("Trial number " + trials + " is a perseverative error.")
              }

          } else {

         #####################
         ##  This trial was not a perseveration (it could be either correct or incorrect)
    
	persList <- Append(persList, 0)

         ##Make sure these are defined
               trialPersev   <- 0
               trialPersevErr <- 0
           ##If the runflag is still 1, that means this is the first non-perseverative response
           ## in the category.  Unset the flag and record the length of the run.
           if(persrunflag)
                {
                   persrunflag <- 0
                   ##Add the current perseverative run count; 
                   ## only do so after the first category
				   if(numCats >0)
                   {
					persRun <- Append(persRun, persev)
                   }
                }

           }


      ## This determines if the response is a 'unique' response; i.e.,
	  ## not correct according to any rule
      
      rulesum <- (corrCol + corrShape + corrNum)

        ##It was incorrect, and not correct according to the previous rule, and not 
        ##a match to another property of the card, increment the unique counter
         if(corr==0 and corrLast == 0  and rulesum == 0)
         {
		   totUnique <- totUnique + 1
         }

      
	  ##FilePrint_(gFileOut, gSubNum + " " + trialnum + " " + numCatsExp +  " " + rule + " " + lastrule + " ")
      index <- 1
      ##Print out the trial data.
      ##loop(i,s)
      ##{
        ##if(index !=4)
        ##{
         ##FilePrint_(gFileOut,i+" ")
        ##}
       ##index <- index + 1
      ##}

	  ##FilePrint_(gFileOut, resp + " " + corr + " " + corrLast + " " +  corrCol + " " + corrShape + " " + corrNum + " ")
      ##FilePrint( gFileOut, trialpersev + " " + trialperseverr + " " +  time0 + " " + rt )
      Show(feedback)
      Draw()
      Wait(500)
      Hide(feedback)
#      Hide(gHeader)
#      Hide(gPrompt)
      Draw()


      ##if you have a run of runlength correct, change rules.
      if(run >= runlength)
      {
        lastrule <- rule
        rule <- First(rules)
        rules <- Rotate(rules,1)
        run <- 0
        runFlag <- 1
        numCats <- numCats + 1
        numCatsExp <- numCatsExp + 1
        
        lastswitch <- trialnum
        trialsPerCat <- Append(trialsPerCat, trials)
        errorsPerCat <- Append(errorsPerCat, errors)
        ##Keep track of the number of perseverations in this category.
        persevs <- Append(persevs, persev)
        persev <- 0
        errors <- 0
        trials <- 0
      
        persrunflag <- 1       ##Reset the perseverative run flag.
        ##Record the number of trials needed to attain first category.  
        if(numCats == 1)
        {
          firstcat <- trialnum
        }
      }

      trialnum <- trialnum + 1
      
      if(numCats >= 6 )
      {
        numCatsExp <- 6
        break
      }
    }

	##Do the final output and computations.

  ##compute hand things up-front
   num <- trialnum - 1
   err <- num - totCorr
   nonp <-  (err-totPersErr)
   
    ## calculating learning to learn
    learn <- 0
    if (numCats < 3) {
        learn <- 0
    } else {
        perErrors <- 0
        perErrorsPerCat <- []
        
        loop(i, Sequence(1,numCats,1)) {
            perErrors <- Roundoff(Nth(errorsPerCat,i) / Nth(trialsPerCat,i)  * 100, 4)
            Print("percent errors" + perErrors)
            perErrorsPerCat <- Append(perErrorsPerCat, perErrors)
        }
        
        perErrDiffScore <- 0
        perErrDiff <- []
        
        loop(i, Sequence(1, numCats-1, 1)) {
            perErrDiffScore <- Roundoff(Nth(perErrorsPerCat, i) - Nth(perErrorsPerCat, i+1), 4)
            Print("percent error difference score" + perErrDiffScore)
            perErrDiff <- Append(perErrDiff, perErrDiffScore)
        }
        
        avgDiff <- Sum(perErrDiff) / Length(perErrDiff)
        Print("average difference" + avgDiff)
        learn <- avgDiff
    }
    

   ##Now, show debriefing info.

    ## ToDo: declare and instantiate report

	feedback <-  Nth(textlist,4)
	
	diff <- 128 - num
	
    ## responses (1-128)
	loop(i, Sequence(1,diff,1)) {
		respList <- Append(respList, -1)
	}
    
    ## correct (1-128)
	loop(i, Sequence(1,diff,1)) {
		corrList <- Append(corrList, -1)
	}

    ## perseveratives (1-128)
	loop(i, Sequence(1,diff,1)) {
		persList <- Append(persList, -1)
	}
	
	uaList <- []
	## unambiguous items (1-128)
	##loop(i, Sequence(1,num,1)) {
    ##    uaList <- Append(uaList, Nth(unambiguousList,i))
    ##}
    
    uaList <- ChooseN(unambiguousList, num)
	## uaList <- Flatten(uaList)
	
	loop(i, Sequence(1,diff,1)) {
	    uaList <- Append(uaList, -1)
    }
    
	totalsList <- []

    ## trials
    totalsList <- Append(totalsList, num)
    
    ## correct
	totalsList <- Append(totalsList, totCorr)
	
	## errors
	totalsList <- Append(totalsList, err)
	
	## percent errors
	totalsList <- Append(totalsList, Roundoff(err/num,4)*100)
	
	## perseveratives
	totalsList <- Append(totalsList, totPers)
	
	## percent perseveratives
	totalsList <- Append(totalsList, Roundoff(totPers/num,4)*100)
	
	## perseverative errors
	totalsList <- Append(totalsList, totPersErr)

	## percent perseverative errors
	totalsList <- Append(totalsList, Roundoff(totPersErr/num,4)*100)
	
	## non perseveratives
	totalsList <- Append(totalsList, nonp)
	
	## percent non perseveratives
	totalsList <- Append(totalsList, Roundoff(nonp/num,4)*100)
	
	## Conceptual Level Responses
	## CLResps
	totalsList <- Append(totalsList, clr)
	
	## Percent Conceptual Level Response
	## PctCLResps
	## (RoundOff(CLResps/Trials,4)*100)
	totalsList <- Append(totalsList, Roundoff(clr/num,4)*100)
	
	## Leave room for them to do calculations
	loop(i, Sequence(1,27,1)) {
    	totalsList <- Append(totalsList, "N/A")
	}
		
	## Categories Completed
	## CatCompl
	totalsList <- Append(totalsList, numCats) 
	
    ## Trials to Complete First Category
	## Trials1
	totalsList <- Append(totalsList, firstCat)
	
	## Failure to Maintain Set
	## FailTMSet
	totalsList <- Append(totalsList, ftms)
	
	## Learning to Learn
	## Learning
	totalsList <- Append(totalsList, learn)
	
	## Categories Completed Percentile
	## Catcomplpctile
    totalsList <- Append(totalsList, "N/A")
    
    ## Trials to Complete First Category Percentile
    ## Trials1pctile
    totalsList <- Append(totalsList, "N/A")
    
    ## Failure to Maintain Set Percentile
    ## FailTMSetpctile
	totalsList <- Append(totalsList, "N/A")
    
    ## Learning Percentile
    ## Learningpctil
	totalsList <- Append(totalsList, "N/A")
	
	report <- Merge(respList, corrList)
	report <- Merge(report, persList)
	report <- Merge(report, uaList)
	report <- Merge(report, totalsList)

    testReport <- []
    testReport <- Append(testReport, numCats)
    testReport <- Append(testReport, num)
    testReport <- Append(testReport, totCorr)
    testReport <- Append(testReport, err)
    testReport <- Append(testReport, totPers)
    testReport <- Append(testReport, totPersErr)
    testReport <- Append(testReport, uniqErr)
    testReport <- Append(testReport, nonp)
    testReport <- Append(testReport, firstCat)
    testReport <- Append(testReport, ftms)
    testReport <- Append(testReport, learn)
    testReport <- Append(testReport, clr)
    testReport <- Append(testReport, Roundoff(clr/num,4)*100)
    ## pers runs
    ## nonp runs
    
	PrintReport(report)

   SetText(gInstructions, feedback)
   Hide(gPrompt)
   Hide(gHeader)
   Show(gInstructions)
   Draw()
   Print("Finished with the Card Sort Task")
   WaitForIt()
   ShowCursor(1) 
 }


##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{
  ##Initialize Window, etc.
  gWin <- MakeWindow("black")   
  
  ## screen resolution init
    gVideoWidth <- 1024
    gVideoHeight <- 768

  gSubNum <- GetSubNum(gWin)

  ##Initialize Font and colors
  gSleepEasy <- 1
   bg <- MakeColor("black")
   fg <- MakeColor("white")
   bg2 <- MakeColor("black")
 
   colGreen <- MakeColor("green")
   colRed   <- MakeColor("red")
 
   gStimFont         <- MakeFont(gPEBLBaseFontMono, 0, 24,fg,bg,1)       
   gCorrFont         <- MakeFont(gPEBLBaseFontMono, 0, 30,colGreen, bg,1)
   gIncorrFont       <- MakeFont(gPEBLBaseFontMono, 0, 30,colRed,   bg,1)

   gInstructionsFont <- MakeFont(gPEBLBaseFont,0,18, fg,bg2,1)  
   gHeaderFont       <- MakeFont(gPEBLBaseFont, 0,36,fg,bg,1)
   
   
   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 600,200)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-300, gVideoHeight/2+5)
   Hide(gInstructions)

   ## Make and hide a header label
   gHeader <- MakeLabel("",gHeaderFont)
   AddObject(gHeader,gWin)
   Move(gHeader, gVideoWidth/2, 100)
   Hide(gHeader)

   #Create the insturctions cue
   gPrompt <- MakeLabel(gPromptText,gStimFont)
   AddObject(gPrompt,gWin)
   Move(gPrompt,350,225)
   Hide(gPrompt)


   gCorrect <- MakeLabel(gCorrectText,gCorrFont)
   AddObject(gCorrect,gWin)
   Move(gCorrect,500,350)
   Hide(gCorrect)
  
   gIncorrect <- MakeLabel(gIncorrectText,gIncorrFont)
   AddObject(gIncorrect,gWin)
   Move(gIncorrect,500,350)
   Hide(gIncorrect)

 }


## This returns two 1-0 correctness stats: [last-rule, cur-rule]
define ScoreTrial(triallist, resp, rule,lastrule)
{
  ##The piles are defined by:
  ## Rule 1: COLOR:  red green blue yellow
  ## Rule 2: SHAPE:  circle star triangle cross
  ## Rule 3: NUMBER: 1 2 3 4
  ## Depending upon the rule (triallist[5]),
  ## the correct response depends upon column 1,2,3

  dimensions <- [gColors, gShapes, gNumbers]
  dimension <- Nth(triallist, rule)

  dimlist <- Nth(dimensions,rule)
   if(lastrule == -1)
   {
      lastdim <- 0 
      lastdimlist <- [-1,-1,-1,-1]
   } else {
  
     lastdim   <- Nth(triallist, lastrule)
     lastdimlist <- Nth(dimensions,lastrule)
   }
  ##So, the trial is correct if, along the chosen dimension,
  ## the response is the same as the pile.

   corr <-     (Nth(dimlist,ToNumber(resp)) == dimension)
   lastcorr <- (Nth(lastdimlist,ToNumber(resp)) == lastdim)


   if(corr)
   {
     ##It was correct
     corCur <- 1
   } else {
     corCur <- 0
   }

   if (lastcorr) 
   { 
         corLast <- 1
   } else  {
         corLast <- 0
   }

  return [corLast, corCur]
}


define Roundoff(x,dec)
{
  power <- 10^dec
  return   Round( x * power)/power
}


define WaitForIt()
{
  if(gUseMouse)
   {
     WaitForDownClick()
   } else {
     WaitforAnyKeyPress()
   }
}

define PrintReport(report) {
    ## print headers
    gFileOut <-FileOpenAppend("bcst-reports.csv")
    FilePrint_(gFileOut, CR(1) + "ID,")
    tmpSeqn <- Sequence(1,128,1)
    loop(i, tmpSeqn) {
        FilePrint_(gFileOut, "R" + i + ",")
    }
    loop(j, tmpSeqn) {
        FilePrint_(gFileOut, "C" + j + ",")
    }
    loop(x, tmpSeqn) {
        FilePrint_(gFileOut, "P" + x + ",")
    }
    loop(y, tmpSeqn) {
        FilePrint_(gFileOut, "U" + y + ",")
    }
    FilePrint(gFileOut, "Trials,Correct,Errors,PctErrors,PersRsps,PctPersRsps,PersErrors,PctPersErrors,NonPersErrors,PctNonPersErrors,CLResps,PctCLResps,ErrorsStd,ErrorsT,ErrorsPctile,PctErrorsStd,PctErrorsT,PctErrorsPctile,PersRspsStd,PersRspsT,PersRspsPctile,PctPersRspsStd,PctPersRspsT,PctPersRspsPctile,PersErrorsStd,PersErrorsT,PersErrorsPctile,PctPersErrorsStd,PctPersErrorsT,PctPersErrorsPctile,NonPersErrorsStd,NonPersErrorsT,NonPersErrorsPctile,PctNonPersErrorsStd,PctNonPersErrorsT,PctNonPersErrorsPctile,PctCLRspsStd,PctCLRspsT,	PctCLRspsPctile,CatCompl,Trials1,FailTMSet,Learning,CatComplPctile,Trials1Pctile,FailTMSetPctile,LearningPctile")
    
    ## print report
    FilePrint_(gFileOut, gSubNum + ",")
    loop(item, report) {
        FilePrint_(gFileOut, item + ",")
    }
    
    ## clean up
    FileClose(gFileOut)
}
