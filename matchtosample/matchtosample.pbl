#!/usr/local/bin/pebl
#################################################################
##  PEBL Match To Sample Task
## 
##  For use with PEBL 0.09 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Test Battery
##  2008 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  This is an implementation of  'match to sample task
##  described in the UTC Test Battery test #24; originating from  
##  Skinner (195).
## 
##  See: Perez, W. A. Masline, P. J., Ramsey, E. g., and Urban, K. E.,
##       (1987). Unified tri-services cognitive performance assessment
## 		 battery: Review and methodology.  DTIC AAMRL-TR-87-007. 
##
## 
##
##
##
##
##
##
##
##
##
#################################################################

 define Start(p)
{


  gSize <- 4  #Number of rows/columns in the matrix
  giveFeedback <- 1  
  numtrials <- 30
  delay <- 3500        ## Time between study and test
  gSleepEasy <- 1

  gWin <- MakeWindow()
  ShowCursor(0)
  gLinecolor <- MakeColor("white")
  gCellempty <- MakeColor("yellow2")
  gCellFull  <-  MakeColor("red")
  gFileOut <- FileOpenWrite("matchtosample-"+gSubNum+".txt")

  instruc <- "During the course of this experiment, you will see a single matrix filled with red and yellow squares, followed by a pair of matrices. Your task is to decide which of the matrices in the pair match the single matrix you were shown first.  At the start of a trial you will see a single matrix made up of red and yellow cells. This is the sample matrix for the trial. You should do your best to memorize the pattern of red and yellow squares in this matrix.  After you have memorized the sample matrix, press anky key on the keyboard, and the sample matrix will be removed from the screen. After a short pause, you will then see two comparison matrices on the screen, side by side One of these two matrices will be identical to the sample matrix that was on the screen, and the other matrix will differ slightly.  Your task is to determine which of the two comparison matrices is the one which matches the sample matrix. If you think the matrix on the left matches the sample matrix, press the left shift key; if you think the matrix on the right matches the sample matrix, press right shift key. You should try to decide which matrix matches the sample one as quickly as you can while still being accurate. If you have any questions, please ask the experimenter now.


Press any key to begin"

  inst1 <- "Press any key to view test matrix"
  inst2 <- "LEFT     Use shift keys to select option     RIGHT"

  gFooter <- EasyLabel(inst2,gVideoWidth/2,gVideoHeight-20,gWin,24) 
  gFeedback <- EasyLabel("",gVideoWidth/2,gVideoHeight/2,gWin,40) 
  Hide(gFeedback)

  ##Provide initial instructions
  inst <- EasyTextBox(instruc,50,50,gWin,16,gVideoWidth-100,gVideoHeight-200)
  Draw()

  WaitForAnyKeyPress()
  Hide(inst)
  Draw()

  ## Print file header
  FilePrint(gFileOut,"subnum trial targ foil studytime rt order resp corr")

  trial <- 1

  while (trial <= numtrials)
   {

   ##Create test matrix 
   matrices <- MakeMatrices()

   targ <- First(matrices)
   foil <- Nth(matrices, 2)

   FilePrint_(gFileOut,gsubnum + " " + trial + " " )
   FilePrint_(gFileOut,ListToString(Flatten(targ))+ " ")
   FilePrint_(gFileOut,ListToString(Flatten(foil))+ " ")

   
 ##Present the study matrix
    gFooter.text <- inst1
    x <- DisplayMatrix(targ,400)
    t0 <- GetTime()
    Draw()  
    WaitForAnyKeyPress()
    RemoveComplex(x,gWin)
    Draw()
    t1 <- GetTime()
    Wait(delay)
    


 ## Present the test matrix
    gFooter.text <- inst2
    order <- Sample([0,1])
    
     if(order)
     {
       x1 <- DisplayMatrix(targ,200)
       x2 <- DisplayMatrix(foil,600)
     } else {
       x1 <- DisplayMatrix(targ,600)
       x2 <- DisplayMatrix(foil,200)
     }
    

    Draw()  
    t2 <- GetTime()
    resp <- WaitForListKeyPress(["<lshift>","<rshift>"])
    t3 <- GetTime()
    RemoveComplex(x1,gWin)
    RemoveComplex(x2,gWin)
    Draw()

    if(order == 0)
    {
      corr <- Lookup(resp,["<lshift>","<rshift>"],[0,1])
    } else {
      corr <- Lookup(resp,["<lshift>","<rshift>"],[1,0])
    }

 

   FilePrint(gFileOut,(t1-t0) + " " + (t3-t2)  + " " + order + " " + resp + " " + corr)      

    if(giveFeedback)
    {
        if(corr)
        {
         gFeedback.text <- "Correct"

        } else {
         gFeedback.text <- "Incorrect"

        }
     Show(gFeedback)
     Draw()
     Wait(800)
     Hide(gFeedback)
     Draw()

    }
    trial <- trial +1
   }

}


define DisplayMatrix(mat,xpos)
{

   xcells <- Length(mat)
   ycells <- Length(First(mat))

   xcenter <- xpos
   ycenter <- gVideoHeight/2

   xsize <- 200
   ysize <- 200

   upper <- ycenter-ysize/2
   lower <- ycenter+ysize/2
   left <- xcenter-xsize/2
   right <- xcenter+xsize/2

   xjump <- xsize/xcells
   yjump <- ysize/ycells


  complex <- []

  #First, make the lines
  
  ##draw the background square
  back <- Rectangle(xcenter,ycenter,xsize,ysize,gcellempty,1)
  AddObject(back,gWin)
  complex <- Append(complex,back)

  ##Draw the 'present' cells

   row <- 1
   loop(line, mat)
     { 
        col <- 1
        loop(cell,line)
         {
           if(cell==1)
           {
             x <- Rectangle(left+(col-.5)*xjump,upper+(row-.5)*yjump,xjump,yjump,gCellFull,1)
             AddObject(x,gWin)
             complex <- Append(complex,x)
           }
           col <- col +1
         }
      row <- row + 1
     }


  ##Finally, draw lines on top
  loop(i,Sequence(0,xcells,1))
  {
    l <- Line(left,upper+yjump*i,xsize,0,gLinecolor)
    AddObject(l,gWin)
    complex <- Append(complex,l)
  }

  loop(i,Sequence(0,ycells,1))
   {

    l <- Line(left+xjump*i,upper,0,ysize,gLinecolor)
    AddObject(l,gWin)
    complex <- Append(complex,l)
   }
 return complex
}


##This creates a matrix and a foil
define MakeMatrices()
{

  #How many dots should be perturbed?

  ##fill half the cells.
 
  ##Number should be 7,8, or 9
  num <- Round(RandomDiscrete(3)+ Floor(gsize^2/2)-2)
  numempty <- gsize*gsize - num  

  standard <- Merge(Repeat(1,num), Repeat(0,numempty))
  ##On the foil, a 1 should be swapped with a 0
  foil     <-Rotate(standard,1)

  tmp <- Transpose(Shuffle(Transpose([standard,foil])))

  targ <- FoldList(First(tmp),gSize)
  foil <- FoldList(Nth(tmp,2),gSize)
  return [targ,foil]
}



define RemoveComplex(comp,win)
{
  loop(i,comp)
  {
    RemoveObject(i,win)
  }
}

define PrintMatrix(m)
{
  loop(i,m)
  {
    PrintList(i)
  }
}


define MatrixEqual(m1,m2)
{

  equal <- 1
  test <- Transpose([m1,m2])
  loop(i,test)
  {
    ii <- Transpose(i)
    loop(j, ii)
    {
      if(not (First(j) ==Nth(j,2)))
       { 
            equal <- 0 
       }
    }
   
  } 
  
  return equal
}


define CheckMatrix(list)
{

  seq <- Sequence(1,Length(list),1)
  
  ok <-1
  if(list == seq or
     list == Reverse(seq))
   {
    ok <- 0
   }

 return ok
}
